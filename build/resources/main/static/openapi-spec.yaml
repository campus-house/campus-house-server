openapi: 3.0.3
info:
  title: 캠퍼스 하우스 API
  description: 대학생 자취 커뮤니티 앱의 백엔드 API 문서
  version: 2.0.0
  contact:
    name: Campus House Team
    email: contact@campushouse.com
    url: https://campushouse.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080
    description: 개발 서버
  - url: https://api.campushouse.com
    description: 프로덕션 서버
security:
  - bearerAuth: []
paths:
  # ========== 인증 관련 API ==========
  /api/auth/register:
    post:
      tags:
        - 인증
      summary: 회원가입
      description: 새로운 사용자를 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 회원가입이 완료되었습니다.
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: user@example.com
                      nickname:
                        type: string
                        example: 사용자닉네임
                      userType:
                        type: string
                        enum: [STUDENT, RESIDENT, BOTH]
                        example: STUDENT
                      location:
                        type: string
                        example: 경기도 수원시
                      university:
                        type: string
                        example: 경희대학교
                      major:
                        type: string
                        example: 컴퓨터공학과
        '400':
          description: 잘못된 요청 또는 중복된 이메일/닉네임
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags:
        - 인증
      summary: 로그인
      description: 사용자 로그인을 수행합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 로그인에 성공했습니다.
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: 로그인 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/verify:
    post:
      tags:
        - 인증
      summary: 토큰 검증
      description: JWT 토큰의 유효성을 검증합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 토큰 검증 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: 토큰 검증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/check-email:
    get:
      tags:
        - 인증
      summary: 이메일 중복 확인
      description: 이메일 중복 여부를 확인합니다.
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
          example: user@example.com
      responses:
        '200':
          description: 이메일 중복 확인 완료
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 사용 가능한 이메일입니다.

  /api/auth/check-nickname:
    get:
      tags:
        - 인증
      summary: 닉네임 중복 확인
      description: 닉네임 중복 여부를 확인합니다.
      parameters:
        - name: nickname
          in: query
          required: true
          schema:
            type: string
          example: 사용자닉네임
      responses:
        '200':
          description: 닉네임 중복 확인 완료
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 사용 가능한 닉네임입니다.

  /api/auth/change-password:
    post:
      tags:
        - 인증
      summary: 비밀번호 변경
      description: 사용자 비밀번호를 변경합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: 비밀번호 변경 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 비밀번호가 변경되었습니다.
        '400':
          description: 비밀번호 변경 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/profile:
    put:
      tags:
        - 인증
      summary: 프로필 수정
      description: 사용자 프로필 정보를 수정합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: 프로필 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 프로필이 수정되었습니다.
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: 프로필 수정 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ========== 건물 관련 API ==========
  /api/buildings:
    get:
      tags:
        - 건물
      summary: 모든 건물 조회
      description: 모든 건물 목록을 페이징하여 조회합니다.
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
          description: 페이지 번호 (0부터 시작)
        - name: size
          in: query
          schema:
            type: integer
            default: 20
          description: 페이지 크기
        - name: sort
          in: query
          schema:
            type: string
            default: createdAt,desc
          description: 정렬 기준
      responses:
        '200':
          description: 건물 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingPage'

    post:
      tags:
        - 건물
      summary: 건물 생성
      description: 새로운 건물을 생성합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      responses:
        '200':
          description: 건물 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          description: 건물 생성 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/buildings/search:
    get:
      tags:
        - 건물
      summary: 키워드로 건물 검색
      description: 키워드를 사용하여 건물을 검색합니다.
      parameters:
        - name: keyword
          in: query
          required: true
          schema:
            type: string
          description: 검색 키워드
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 검색 결과 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingPage'


  /api/buildings/nearby:
    get:
      tags:
        - 건물
      summary: 위치 기반 검색
      description: 좌표를 기준으로 반경 내 건물을 검색합니다.
      parameters:
        - name: latitude
          in: query
          required: true
          schema:
            type: number
            format: double
          description: 위도
        - name: longitude
          in: query
          required: true
          schema:
            type: number
            format: double
          description: 경도
        - name: radiusKm
          in: query
          schema:
            type: number
            format: double
            default: 1.0
          description: 검색 반경 (km)
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 검색 결과 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingPage'

  /api/buildings/search/filters:
    get:
      tags:
        - 건물
      summary: 필터링 검색
      description: 다양한 조건으로 건물을 필터링하여 검색합니다.
      parameters:
        - name: minDeposit
          in: query
          schema:
            type: number
            format: decimal
          description: 최소 보증금
        - name: maxDeposit
          in: query
          schema:
            type: number
            format: decimal
          description: 최대 보증금
        - name: minMonthlyRent
          in: query
          schema:
            type: number
            format: decimal
          description: 최소 월세
        - name: maxMonthlyRent
          in: query
          schema:
            type: number
            format: decimal
          description: 최대 월세
        - name: minJeonse
          in: query
          schema:
            type: number
            format: decimal
          description: 최소 전세
        - name: maxJeonse
          in: query
          schema:
            type: number
            format: decimal
          description: 최대 전세
        - name: elevatorRequired
          in: query
          schema:
            type: boolean
          description: 엘리베이터 필수 여부
        - name: maxWalkingTime
          in: query
          schema:
            type: integer
          description: 최대 도보 시간 (분)
        - name: buildingUsage
          in: query
          schema:
            type: string
          description: 건물 용도
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 필터링 결과 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingPage'


  /api/buildings/building-usages:
    get:
      tags:
        - 건물
      summary: 건물 용도 목록 조회
      description: 사용 가능한 건물 용도 목록을 조회합니다.
      responses:
        '200':
          description: 건물 용도 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["아파트", "오피스텔", "단독다가구"]

  /api/buildings/{buildingId}:
    get:
      tags:
        - 건물
      summary: 건물 상세 조회
      description: 특정 건물의 상세 정보를 조회합니다.
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      responses:
        '200':
          description: 건물 상세 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          description: 건물을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - 건물
      summary: 건물 수정
      description: 특정 건물 정보를 수정합니다.
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      responses:
        '200':
          description: 건물 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          description: 건물을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - 건물
      summary: 건물 삭제
      description: 특정 건물을 삭제합니다.
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      responses:
        '200':
          description: 건물 삭제 성공
        '404':
          description: 건물을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/buildings/{buildingId}/scrap:
    post:
      tags:
        - 건물
      summary: 건물 스크랩
      description: 특정 건물을 스크랩합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      responses:
        '200':
          description: 스크랩 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingScrap'
        '400':
          description: 스크랩 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - 건물
      summary: 건물 스크랩 취소
      description: 특정 건물의 스크랩을 취소합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      responses:
        '200':
          description: 스크랩 취소 성공
        '400':
          description: 스크랩 취소 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/buildings/{buildingId}/scrap/status:
    get:
      tags:
        - 건물
      summary: 건물 스크랩 상태 확인
      description: 특정 건물의 스크랩 여부를 확인합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      responses:
        '200':
          description: 스크랩 상태 확인 성공
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          description: 상태 확인 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/buildings/{buildingId}/reviews:
    get:
      tags:
        - 건물
      summary: 건물 후기 조회
      description: 특정 건물의 후기 목록을 조회합니다.
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
        - name: sort
          in: query
          schema:
            type: string
            default: newest
            enum: [newest, oldest, rating]
          description: 정렬 기준
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 후기 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingReviewPage'

    post:
      tags:
        - 건물
      summary: 건물 후기 작성
      description: 특정 건물에 후기를 작성합니다. 거주지 인증이 필요합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildingReview'
      responses:
        '200':
          description: 후기 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingReview'
        '403':
          description: 거주지 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: 후기 작성 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/buildings/{buildingId}/qnas:
    get:
      tags:
        - 건물
      summary: 건물 질문 조회
      description: 특정 건물의 질문 목록을 조회합니다.
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 질문 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPage'

    post:
      tags:
        - 건물
      summary: 건물 질문 작성
      description: 특정 건물에 질문을 작성합니다. 거주지 인증이 필요합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
      responses:
        '200':
          description: 질문 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '403':
          description: 거주지 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: 질문 작성 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/buildings/{buildingId}/transfers:
    get:
      tags:
        - 건물
      summary: 건물 양도 조회
      description: 특정 건물의 양도 목록을 조회합니다.
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 양도 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPage'

    post:
      tags:
        - 건물
      summary: 건물 양도 작성
      description: 특정 건물에 양도 글을 작성합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
      responses:
        '200':
          description: 양도 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: 양도 작성 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ========== 게시글 관련 API ==========
  /api/boards/{type}/posts:
    get:
      tags:
        - 게시글
      summary: 게시글 목록 조회
      description: 특정 게시판의 게시글 목록을 조회합니다.
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [apartment, question, local, transfer]
          description: 게시판 타입
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPage'
        '401':
          description: 인증 필요
        '403':
          description: 거주지 인증 필요

    post:
      tags:
        - 게시글
      summary: 게시글 작성
      description: 새로운 게시글을 작성합니다.
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [apartment, question, local, transfer]
          description: 게시판 타입
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: 게시글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
        '403':
          description: 거주지 인증 필요

  /api/posts/{id}:
    get:
      tags:
        - 게시글
      summary: 게시글 상세 조회
      description: 특정 게시글의 상세 정보를 조회합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 게시글 ID
      responses:
        '200':
          description: 게시글 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: 게시글을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - 게시글
      summary: 게시글 수정
      description: 내가 작성한 게시글을 수정합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 게시글 ID
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: 게시글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
        '403':
          description: 권한 없음

    delete:
      tags:
        - 게시글
      summary: 게시글 삭제
      description: 내가 작성한 게시글을 삭제합니다.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 게시글 ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 게시글 삭제 성공
        '401':
          description: 인증 필요
        '403':
          description: 권한 없음
        '404':
          description: 게시글을 찾을 수 없음

  /api/posts/{postId}/like:
    post:
      tags:
        - 게시글
      summary: 게시글 좋아요 토글
      description: 게시글에 좋아요를 추가하거나 제거합니다.
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
          description: 게시글 ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 좋아요 토글 성공
          content:
            application/json:
              schema:
                type: string
                example: 좋아요 추가됨
        '400':
          description: 좋아요 토글 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요

  /api/posts/{postId}/bookmark:
    post:
      tags:
        - 게시글
      summary: 게시글 북마크 토글
      description: 게시글을 북마크에 추가하거나 제거합니다.
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
          description: 게시글 ID
        - name: userId
          in: query
          required: true
          schema:
            type: integer
          description: 사용자 ID
      responses:
        '200':
          description: 북마크 토글 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkResponse'
        '400':
          description: 북마크 토글 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/posts/{postId}/bookmark/status:
    get:
      tags:
        - 게시글
      summary: 게시글 북마크 상태 확인
      description: 특정 게시글이 북마크되어 있는지 확인합니다.
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
          description: 게시글 ID
        - name: userId
          in: query
          required: true
          schema:
            type: integer
          description: 사용자 ID
      responses:
        '200':
          description: 북마크 상태 조회 성공
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          description: 상태 확인 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ========== 댓글 관련 API ==========
  /api/posts/{postId}/comments:
    post:
      tags:
        - 댓글
      summary: 댓글 작성
      description: 게시글에 댓글을 작성합니다.
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
          description: 게시글 ID
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '200':
          description: 댓글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: 댓글 작성 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요

  /api/comments/{commentId}:
    put:
      tags:
        - 댓글
      summary: 댓글 수정
      description: 내가 작성한 댓글을 수정합니다.
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
          description: 댓글 ID
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: 댓글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: 댓글 수정 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
        '403':
          description: 권한 없음

    delete:
      tags:
        - 댓글
      summary: 댓글 삭제
      description: 내가 작성한 댓글을 삭제합니다.
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
          description: 댓글 ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 댓글 삭제 성공
        '401':
          description: 인증 필요
        '403':
          description: 권한 없음
        '404':
          description: 댓글을 찾을 수 없음

  # ========== 스크랩 관련 API ==========
  /api/scraps/buildings:
    get:
      tags:
        - 스크랩
      summary: 내 건물 스크랩 목록
      description: 내가 스크랩한 건물 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 스크랩 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingScrapPage'
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/scraps/buildings/{buildingId}:
    post:
      tags:
        - 스크랩
      summary: 건물 스크랩
      description: 특정 건물을 스크랩합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      responses:
        '200':
          description: 스크랩 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingScrap'
        '400':
          description: 스크랩 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - 스크랩
      summary: 건물 스크랩 취소
      description: 특정 건물의 스크랩을 취소합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: buildingId
          in: path
          required: true
          schema:
            type: integer
          description: 건물 ID
      responses:
        '200':
          description: 스크랩 취소 성공
        '400':
          description: 스크랩 취소 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ========== 마이페이지 관련 API ==========
  /api/mypage/profile:
    get:
      tags:
        - 마이페이지
      summary: 사용자 프로필 조회
      description: 현재 사용자의 프로필 정보를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 프로필 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - 마이페이지
      summary: 사용자 프로필 수정
      description: 현재 사용자의 프로필 정보를 수정합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: 프로필 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 프로필 수정 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mypage/posts:
    get:
      tags:
        - 마이페이지
      summary: 내가 작성한 게시글 조회
      description: 내가 작성한 게시글 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPage'
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mypage/comments:
    get:
      tags:
        - 마이페이지
      summary: 내가 작성한 댓글 조회
      description: 내가 작성한 댓글 목록을 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 댓글 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mypage/bookmarks:
    get:
      tags:
        - 마이페이지
      summary: 내가 저장한 게시글 조회
      description: 내가 북마크한 게시글 목록을 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 북마크 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bookmark'
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mypage/characters:
    get:
      tags:
        - 마이페이지
      summary: 보유 캐릭터 조회
      description: 내가 보유한 캐릭터 목록을 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 캐릭터 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCharacter'
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mypage/characters/{characterId}/set-main:
    post:
      tags:
        - 마이페이지
      summary: 대표 캐릭터 설정
      description: 특정 캐릭터를 대표 캐릭터로 설정합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: characterId
          in: path
          required: true
          schema:
            type: integer
          description: 캐릭터 ID
      responses:
        '200':
          description: 대표 캐릭터 설정 성공
        '400':
          description: 설정 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mypage/characters/gacha:
    post:
      tags:
        - 마이페이지
      summary: 캐릭터 가챠
      description: 캐릭터 가챠를 진행합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 가챠 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: 가챠 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mypage/characters/{characterId}/purchase:
    post:
      tags:
        - 마이페이지
      summary: 캐릭터 구매
      description: 특정 캐릭터를 구매합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: characterId
          in: path
          required: true
          schema:
            type: integer
          description: 캐릭터 ID
      responses:
        '200':
          description: 구매 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: 구매 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mypage/points/history:
    get:
      tags:
        - 마이페이지
      summary: 포인트 내역 조회
      description: 내 포인트 사용/적립 내역을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 포인트 내역 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardHistoryPage'
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mypage/points/stats:
    get:
      tags:
        - 마이페이지
      summary: 포인트 통계 조회
      description: 내 포인트 통계 정보를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 포인트 통계 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRewardStats'
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/mypage/residence:
    get:
      tags:
        - 마이페이지
      summary: 내 거주지 조회
      description: 내가 인증한 거주지 정보를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 거주지 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidenceInfo'
        '204':
          description: 인증된 거주지 없음
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ========== 알림 관련 API ==========
  /api/notifications:
    get:
      tags:
        - 알림
      summary: 내 알림 목록 조회
      description: 내 알림 목록을 페이징하여 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 알림 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPage'
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/notifications/unread:
    get:
      tags:
        - 알림
      summary: 읽지 않은 알림 조회
      description: 읽지 않은 알림 목록을 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 읽지 않은 알림 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '400':
          description: 조회 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/notifications/{notificationId}/read:
    put:
      tags:
        - 알림
      summary: 알림 읽음 처리
      description: 특정 알림을 읽음 처리합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: integer
          description: 알림 ID
      responses:
        '200':
          description: 읽음 처리 성공
        '400':
          description: 읽음 처리 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/notifications/read-all:
    put:
      tags:
        - 알림
      summary: 모든 알림 읽음 처리
      description: 모든 알림을 읽음 처리합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 모든 알림 읽음 처리 성공
        '400':
          description: 읽음 처리 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ========== 기본 응답 스키마 ==========
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: 오류가 발생했습니다.
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    # ========== 인증 관련 스키마 ==========
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - nickname
        - userType
        - location
        - university
        - major
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 8
          example: password123
        nickname:
          type: string
          minLength: 2
          maxLength: 20
          example: 사용자닉네임
        userType:
          type: string
          enum: [STUDENT, RESIDENT, BOTH]
          example: STUDENT
        location:
          type: string
          example: 경기도 수원시
        university:
          type: string
          example: 경희대학교
        major:
          type: string
          example: 컴퓨터공학과

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          example: password123

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          example: oldpassword123
        newPassword:
          type: string
          minLength: 8
          example: newpassword123

    UpdateProfileRequest:
      type: object
      properties:
        nickname:
          type: string
          minLength: 2
          maxLength: 20
          example: 새로운닉네임
        location:
          type: string
          example: 경기도 용인시
        university:
          type: string
          example: 경희대학교
        major:
          type: string
          example: 컴퓨터공학과
        introduction:
          type: string
          example: 자기소개입니다.

    # ========== 사용자 관련 스키마 ==========
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        nickname:
          type: string
          example: 사용자닉네임
        profileImage:
          type: string
          example: https://example.com/profile.jpg
        characterImage:
          type: string
          example: https://example.com/character.jpg
        userType:
          type: string
          enum: [STUDENT, RESIDENT, BOTH]
          example: STUDENT
        isVerified:
          type: boolean
          example: true
        verifiedBuildingName:
          type: string
          example: 경희대학교 기숙사
        rewards:
          type: integer
          example: 1000
        mainCharacterId:
          type: integer
          example: 1
        location:
          type: string
          example: 경기도 수원시
        university:
          type: string
          example: 경희대학교
        major:
          type: string
          example: 컴퓨터공학과
        introduction:
          type: string
          example: 자기소개입니다.
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        nickname:
          type: string
          example: 사용자닉네임
        profileImage:
          type: string
          example: https://example.com/profile.jpg
        characterImage:
          type: string
          example: https://example.com/character.jpg
        userType:
          type: string
          enum: [STUDENT, RESIDENT, BOTH]
          example: STUDENT
        isVerified:
          type: boolean
          example: true
        verifiedBuildingName:
          type: string
          example: 경희대학교 기숙사
        rewards:
          type: integer
          example: 1000
        mainCharacterId:
          type: integer
          example: 1
        location:
          type: string
          example: 경기도 수원시
        university:
          type: string
          example: 경희대학교
        major:
          type: string
          example: 컴퓨터공학과
        introduction:
          type: string
          example: 자기소개입니다.

    # ========== 건물 관련 스키마 ==========
    Building:
      type: object
      properties:
        id:
          type: integer
          example: 1
        buildingName:
          type: string
          example: 경희대학교 기숙사
        address:
          type: string
          example: 경기도 용인시 기흥구 덕영대로 1732
        latitude:
          type: number
          format: double
          example: 37.2415169034264
        longitude:
          type: number
          format: double
          example: 127.071726204875
        deposit:
          type: number
          format: decimal
          example: 2000
          description: 보증금 (만원 단위, 소수점 제외)
        monthlyRent:
          type: number
          format: decimal
          example: 50
          description: 월세 (만원 단위, 소수점 제외)
        jeonse:
          type: number
          format: decimal
          example: 1000
          description: 전세 (만원 단위, 소수점 제외)
        formattedDeposit:
          type: string
          example: "2억"
          description: 포맷팅된 보증금 (예: 2억, 1억5천, 30만)
        formattedMonthlyRent:
          type: string
          example: "30만"
          description: 포맷팅된 월세 (예: 30만, 50만)
        formattedJeonse:
          type: string
          example: "1억"
          description: 포맷팅된 전세 (예: 1억, 2억5천)
        households:
          type: integer
          example: 100
        heatingType:
          type: string
          example: 개별난방
        elevators:
          type: integer
          example: 2
        buildingUsage:
          type: string
          example: 기타
        approvalDate:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        completionDate:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        schoolWalkingTime:
          type: integer
          example: 20
        stationWalkingTime:
          type: integer
          example: 31
        scrapCount:
          type: integer
          example: 5
        floorsGround:
          type: integer
          example: 5
        area:
          type: number
          format: double
          example: 30.0
        constructionYear:
          type: integer
          example: 1996
        roadName:
          type: string
          example: 경기 용인시 기흥구 서그내로53번길
        sampleCount:
          type: integer
          example: 1
        avgPrice:
          type: number
          format: decimal
          example: 2000.00
        nearbyConvenienceStores:
          type: integer
          example: 3
        nearbyMarts:
          type: integer
          example: 2
        nearbyHospitals:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    BuildingScrap:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        buildingId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    BuildingReview:
      type: object
      properties:
        id:
          type: integer
          example: 1
        buildingId:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        title:
          type: string
          example: 좋은 기숙사입니다
        content:
          type: string
          example: 시설이 깔끔하고 관리가 잘 됩니다.
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 4
        noiseLevel:
          type: integer
          minimum: 1
          maximum: 5
          example: 3
        safetyLevel:
          type: integer
          minimum: 1
          maximum: 5
          example: 4
        convenienceLevel:
          type: integer
          minimum: 1
          maximum: 5
          example: 4
        managementLevel:
          type: integer
          minimum: 1
          maximum: 5
          example: 4
        pros:
          type: string
          example: 깔끔한 시설, 좋은 관리
        cons:
          type: string
          example: 조금 시끄러움
        livingPeriod:
          type: string
          example: 6개월
        imageUrl:
          type: string
          example: https://example.com/review.jpg
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    # ========== 게시글 관련 스키마 ==========
    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 게시글 제목
        content:
          type: string
          example: 게시글 내용입니다.
        boardType:
          type: string
          enum: [APARTMENT, QUESTION, LOCAL, TRANSFER]
          example: QUESTION
        author:
          $ref: '#/components/schemas/User'
        building:
          $ref: '#/components/schemas/Building'
        viewCount:
          type: integer
          example: 10
        likeCount:
          type: integer
          example: 5
        scrapCount:
          type: integer
          example: 3
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    QuestionRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          example: 질문 제목
        content:
          type: string
          example: 질문 내용입니다.

    # ========== 댓글 관련 스키마 ==========
    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: 댓글 내용입니다.
        author:
          $ref: '#/components/schemas/User'
        post:
          $ref: '#/components/schemas/Post'
        parentId:
          type: integer
          example: null
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    CreateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          example: 댓글 내용입니다.
        parentId:
          type: integer
          example: null

    UpdateCommentRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          example: 수정된 댓글 내용입니다.

    # ========== 북마크 관련 스키마 ==========
    Bookmark:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        postId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    BookmarkResponse:
      type: object
      properties:
        isBookmarked:
          type: boolean
          example: true

    # ========== 캐릭터 관련 스키마 ==========
    Character:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 캐릭터 이름
        description:
          type: string
          example: 캐릭터 설명
        imageUrl:
          type: string
          example: https://example.com/character.jpg
        rarity:
          type: string
          enum: [COMMON, RARE, EPIC, LEGENDARY]
          example: RARE
        price:
          type: integer
          example: 100
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    UserCharacter:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        characterId:
          type: integer
          example: 1
        isMain:
          type: boolean
          example: false
        quantity:
          type: integer
          example: 1
        obtainedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    # ========== 포인트 관련 스키마 ==========
    RewardHistory:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        points:
          type: integer
          example: 100
        reason:
          type: string
          example: 게시글 작성
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    UserRewardStats:
      type: object
      properties:
        totalPoints:
          type: integer
          example: 1000
        availablePoints:
          type: integer
          example: 500
        usedPoints:
          type: integer
          example: 500
        totalEarned:
          type: integer
          example: 1000
        totalSpent:
          type: integer
          example: 500

    # ========== 거주지 관련 스키마 ==========
    ResidenceInfo:
      type: object
      properties:
        buildingId:
          type: integer
          example: 1
        buildingName:
          type: string
          example: 경희대학교 기숙사
        buildingAddress:
          type: string
          example: 경기도 용인시 기흥구 덕영대로 1732
        roomNumber:
          type: string
          example: 101호
        verifiedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    # ========== 알림 관련 스키마 ==========
    Notification:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        type:
          type: string
          enum: [LIKE, COMMENT, BOOKMARK, SYSTEM]
          example: LIKE
        title:
          type: string
          example: 좋아요 알림
        content:
          type: string
          example: 게시글에 좋아요가 눌렸습니다.
        isRead:
          type: boolean
          example: false
        relatedId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    # ========== 페이징 관련 스키마 ==========
    BuildingPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Building'
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
              example: 0
            pageSize:
              type: integer
              example: 20
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5
        size:
          type: integer
          example: 20
        number:
          type: integer
          example: 0
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: false

    BuildingReviewPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BuildingReview'
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
              example: 0
            pageSize:
              type: integer
              example: 20
        totalElements:
          type: integer
          example: 50
        totalPages:
          type: integer
          example: 3
        size:
          type: integer
          example: 20
        number:
          type: integer
          example: 0
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: false

    PostPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
              example: 0
            pageSize:
              type: integer
              example: 20
        totalElements:
          type: integer
          example: 200
        totalPages:
          type: integer
          example: 10
        size:
          type: integer
          example: 20
        number:
          type: integer
          example: 0
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: false

    BuildingScrapPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BuildingScrap'
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
              example: 0
            pageSize:
              type: integer
              example: 20
        totalElements:
          type: integer
          example: 30
        totalPages:
          type: integer
          example: 2
        size:
          type: integer
          example: 20
        number:
          type: integer
          example: 0
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: false

    NotificationPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
              example: 0
            pageSize:
              type: integer
              example: 20
        totalElements:
          type: integer
          example: 15
        totalPages:
          type: integer
          example: 1
        size:
          type: integer
          example: 20
        number:
          type: integer
          example: 0
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: true

    RewardHistoryPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/RewardHistory'
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
              example: 0
            pageSize:
              type: integer
              example: 20
        totalElements:
          type: integer
          example: 25
        totalPages:
          type: integer
          example: 2
        size:
          type: integer
          example: 20
        number:
          type: integer
          example: 0
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: false