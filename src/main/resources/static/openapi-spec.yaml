openapi: 3.0.3
info:
  title: 캠퍼스 하우스 API
  description: 대학생 자취 커뮤니티 앱의 백엔드 API 문서
  version: 1.0.0
  contact:
    name: Campus House Team
    email: contact@campushouse.com
    url: https://campushouse.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080
    description: 개발 서버
  - url: https://api.campushouse.com
    description: 프로덕션 서버
security:
  - bearerAuth: []
paths:
  # 인증 관련 API
  /api/auth/register:
    post:
      tags:
        - 인증
      summary: 회원가입
      description: 새로운 사용자를 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 회원가입이 완료되었습니다.
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: user@example.com
                      nickname:
                        type: string
                        example: 홍길동
                      userType:
                        type: string
                        enum: [STUDENT, GRADUATE, OTHER]
                        example: STUDENT
        '400':
          description: 잘못된 요청 또는 중복된 이메일/닉네임
  /api/auth/login:
    post:
      tags:
        - 인증
      summary: 로그인
      description: 이메일과 비밀번호로 로그인합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 로그인에 성공했습니다.
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: 잘못된 요청 또는 인증 실패
  /api/auth/verify:
    post:
      tags:
        - 인증
      summary: 토큰 검증
      description: JWT 토큰을 검증하고 사용자 정보를 반환합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 토큰 검증 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/UserInfo'
        '400':
          description: 토큰 검증 실패
  /api/auth/check-email:
    get:
      tags:
        - 인증
      summary: 이메일 중복 확인
      description: 이메일 중복 여부를 확인합니다.
      parameters:
        - name: email
          in: query
          required: true
          description: 확인할 이메일
          schema:
            type: string
            example: user@example.com
      responses:
        '200':
          description: 이메일 중복 확인 결과
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 사용 가능한 이메일입니다.
  /api/auth/check-nickname:
    get:
      tags:
        - 인증
      summary: 닉네임 중복 확인
      description: 닉네임 중복 여부를 확인합니다.
      parameters:
        - name: nickname
          in: query
          required: true
          description: 확인할 닉네임
          schema:
            type: string
            example: 홍길동
      responses:
        '200':
          description: 닉네임 중복 확인 결과
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 사용 가능한 닉네임입니다.
  /api/auth/change-password:
    post:
      tags:
        - 인증
      summary: 비밀번호 변경
      description: 현재 비밀번호를 확인하고 새 비밀번호로 변경합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: 비밀번호 변경 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 비밀번호가 변경되었습니다.
        '400':
          description: 잘못된 요청 또는 현재 비밀번호 불일치
  /api/auth/profile:
    put:
      tags:
        - 인증
      summary: 프로필 수정
      description: 사용자 프로필 정보를 수정합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: 프로필 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 프로필이 수정되었습니다.
                  user:
                    $ref: '#/components/schemas/UserInfo'
        '400':
          description: 잘못된 요청
  # 마이페이지 관련 API
  /api/mypage/profile:
    get:
      tags:
        - 마이페이지
      summary: 사용자 프로필 조회
      description: 현재 사용자의 프로필 정보를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 프로필 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: 잘못된 요청
    put:
      tags:
        - 마이페이지
      summary: 사용자 프로필 수정
      description: 현재 사용자의 프로필 정보를 수정합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyPageUpdateProfileRequest'
      responses:
        '200':
          description: 프로필 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 잘못된 요청
  /api/mypage/posts:
    get:
      tags:
        - 마이페이지
      summary: 내가 작성한 게시글 조회
      description: 현재 사용자가 작성한 게시글 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '400':
          description: 잘못된 요청
  /api/mypage/comments:
    get:
      tags:
        - 마이페이지
      summary: 내가 작성한 댓글 조회
      description: 현재 사용자가 작성한 댓글 목록을 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 댓글 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: 잘못된 요청
  /api/mypage/bookmarks:
    get:
      tags:
        - 마이페이지
      summary: 내가 저장한 게시글 조회
      description: 현재 사용자가 북마크한 모든 게시글 목록을 조회합니다. 북마크 API와 연동됩니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 북마크 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bookmark'
        '400':
          description: 잘못된 요청
  /api/mypage/characters:
    get:
      tags:
        - 마이페이지
      summary: 보유 캐릭터 조회
      description: 현재 사용자가 보유한 캐릭터 목록을 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 캐릭터 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCharacter'
        '400':
          description: 잘못된 요청
  /api/mypage/characters/{characterId}/set-main:
    post:
      tags:
        - 마이페이지
      summary: 대표 캐릭터 설정
      description: 보유한 캐릭터 중 하나를 대표 캐릭터로 설정합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: characterId
          in: path
          required: true
          description: 캐릭터 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 대표 캐릭터 설정 성공
        '400':
          description: 잘못된 요청
  /api/mypage/characters/gacha:
    post:
      tags:
        - 마이페이지
      summary: 캐릭터 가챠
      description: 포인트를 사용하여 캐릭터를 뽑습니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 가챠 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: 포인트 부족 또는 가챠 실패
  /api/mypage/characters/{characterId}/purchase:
    post:
      tags:
        - 마이페이지
      summary: 캐릭터 구매
      description: 포인트를 사용하여 특정 캐릭터를 구매합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: characterId
          in: path
          required: true
          description: 캐릭터 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 캐릭터 구매 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: 포인트 부족 또는 구매 실패
  /api/mypage/points/history:
    get:
      tags:
        - 마이페이지
      summary: 포인트 내역 조회
      description: 현재 사용자의 포인트 사용/적립 내역을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 내역 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 포인트 내역 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/PointHistory'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '400':
          description: 잘못된 요청
  /api/mypage/points/stats:
    get:
      tags:
        - 마이페이지
      summary: 포인트 통계 조회
      description: 현재 사용자의 포인트 통계 정보를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 포인트 통계 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPointStats'
        '400':
          description: 잘못된 요청
  /api/mypage/residence:
    get:
      tags:
        - 마이페이지
      summary: 내 거주지 조회
      description: 승인된 거주지 인증 정보를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 거주지 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidenceInfo'
        '204':
          description: 승인된 거주지 인증이 없음
        '400':
          description: 잘못된 요청
  /api/mypage/property-reviews:
    get:
      tags:
        - 마이페이지
      summary: 내가 남긴 매물 후기 조회
      description: 현재 사용자가 작성한 매물 후기 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 후기 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 매물 후기 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/PropertyReview'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '400':
          description: 잘못된 요청
    post:
      tags:
        - 마이페이지
      summary: 매물 후기 작성
      description: 매물에 대한 후기를 작성합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePropertyReviewRequest'
      responses:
        '200':
          description: 매물 후기 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyReview'
        '400':
          description: 잘못된 요청
  /api/mypage/characters/stats:
    get:
      tags:
        - 마이페이지
      summary: 캐릭터 통계 조회
      description: 현재 사용자의 캐릭터 보유 통계를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 캐릭터 통계 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCharacterStats'
        '400':
          description: 잘못된 요청
  # 게시글 관리
  /api/boards/{type}/posts:
    post:
      tags:
        - 게시글
      summary: 게시글 작성
      description: 새로운 게시글을 작성합니다. 사진 포함 가능합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 게시판 타입
          schema:
            type: string
            example: free
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: 게시글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
    get:
      tags:
        - 게시글
      summary: 모든 게시글 조회
      description: 페이징을 지원하는 게시글 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 게시판 타입
          schema:
            type: string
            example: free
        - name: page
          in: query
          description: 페이지 번호 (0부터 시작)
          schema:
            type: integer
            default: 0
            example: 0
        - name: size
          in: query
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 20
            example: 20
        - name: sort
          in: query
          description: 정렬 기준
          schema:
            type: string
            enum: [latest, popular]
            default: latest
            example: latest
      responses:
        '200':
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'
        '401':
          description: 인증 필요
  /api/boards/{type}/posts/latest:
    get:
      tags:
        - 게시글
      summary: 최신순 게시글 조회
      description: 최신순으로 정렬된 게시글 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 게시판 타입
          schema:
            type: string
            example: free
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 최신순 게시글 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'
        '401':
          description: 인증 필요
  /api/boards/{type}/posts/popular:
    get:
      tags:
        - 게시글
      summary: 인기순 게시글 조회
      description: 좋아요 수 기준으로 정렬된 인기 게시글 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 게시판 타입
          schema:
            type: string
            example: free
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 인기순 게시글 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'
        '401':
          description: 인증 필요
  /api/boards/{type}/posts/search:
    get:
      tags:
        - 게시글
      summary: 게시글 검색
      description: 제목과 내용에서 키워드를 검색합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 게시판 타입
          schema:
            type: string
            example: free
        - name: keyword
          in: query
          required: true
          description: 검색 키워드
          schema:
            type: string
            example: 자취방
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 검색 결과 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'
        '401':
          description: 인증 필요
  /api/posts/{id}:
    get:
      tags:
        - 게시글
      summary: 특정 게시글 조회
      description: 게시글 ID로 특정 게시글을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 게시글 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: 게시글을 찾을 수 없음
        '401':
          description: 인증 필요
    put:
      tags:
        - 게시글
      summary: 게시글 수정
      description: 내가 작성한 게시글만 수정할 수 있습니다.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: 게시글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '403':
          description: 수정 권한 없음
        '404':
          description: 게시글을 찾을 수 없음
    delete:
      tags:
        - 게시글
      summary: 게시글 삭제
      description: 내가 작성한 게시글만 삭제할 수 있습니다.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 게시글 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 게시글이 삭제되었습니다.
        '401':
          description: 인증 필요
        '403':
          description: 삭제 권한 없음
        '404':
          description: 게시글을 찾을 수 없음
  /api/posts/{postId}/like:
    post:
      tags:
        - 게시글
      summary: 좋아요 달기
      description: 게시물에 좋아요를 추가합니다. 게시물의 좋아요 수가 1 증가하고 유저의 좋아요 목록에 추가됩니다.
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 좋아요 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 좋아요가 추가되었습니다.
                  likeCount:
                    type: integer
                    example: 15
        '400':
          description: 이미 좋아요를 누른 게시글
        '401':
          description: 인증 필요
        '404':
          description: 게시글을 찾을 수 없음
  /api/posts/{postId}/bookmark:
    post:
      tags:
        - 게시글
      summary: 게시글 북마크 토글
      description: 게시글을 북마크에 추가하거나 제거합니다. 게시글의 스크랩 수가 변경됩니다.
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
        - name: userId
          in: query
          required: true
          description: 사용자 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 북마크 토글 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '404':
          description: 게시글을 찾을 수 없음
  /api/posts/{postId}/bookmark/status:
    get:
      tags:
        - 게시글
      summary: 게시글 북마크 상태 확인
      description: 특정 게시글이 북마크되어 있는지 확인합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
        - name: userId
          in: query
          required: true
          description: 사용자 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 북마크 상태 조회 성공
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  # 캐릭터 관련 API
  /api/characters:
    get:
      tags:
        - 캐릭터
      summary: 모든 활성화된 캐릭터 조회
      description: 활성화된 모든 캐릭터 목록을 조회합니다.
      responses:
        '200':
          description: 캐릭터 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
  /api/characters/rarity/{rarity}:
    get:
      tags:
        - 캐릭터
      summary: 희귀도별 캐릭터 조회
      description: 특정 희귀도의 캐릭터 목록을 조회합니다.
      parameters:
        - name: rarity
          in: path
          required: true
          description: 캐릭터 희귀도
          schema:
            type: string
            enum: [COMMON, RARE, EPIC, LEGENDARY]
            example: RARE
      responses:
        '200':
          description: 캐릭터 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
        '400':
          description: 잘못된 희귀도 값
  /api/characters/{characterId}:
    get:
      tags:
        - 캐릭터
      summary: 특정 캐릭터 상세 조회
      description: 특정 캐릭터의 상세 정보를 조회합니다.
      parameters:
        - name: characterId
          in: path
          required: true
          description: 캐릭터 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 캐릭터 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '404':
          description: 캐릭터를 찾을 수 없음
  # 메모 관련 API
  /api/memos:
    get:
      tags:
        - 메모
      summary: 활성 메모 목록 조회
      description: 현재 활성화된 메모 목록을 조회합니다.
      responses:
        '200':
          description: 메모 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Memo'
    post:
      tags:
        - 메모
      summary: 메모 생성
      description: 새로운 메모를 생성합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemoRequest'
      responses:
        '200':
          description: 메모 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memo'
        '400':
          description: 잘못된 요청
  /api/memos/type/{type}:
    get:
      tags:
        - 메모
      summary: 특정 타입의 메모 조회
      description: 특정 타입의 메모 목록을 조회합니다.
      parameters:
        - name: type
          in: path
          required: true
          description: 메모 타입
          schema:
            type: string
            enum: [ROOMMATE, STUDY, EVENT, ETC]
            example: ROOMMATE
      responses:
        '200':
          description: 메모 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Memo'
        '400':
          description: 잘못된 메모 타입
  /api/memos/{memoId}/replies:
    post:
      tags:
        - 메모
      summary: 메모 답장/채팅 작성
      description: 메모에 답장이나 채팅을 작성합니다.
      parameters:
        - name: memoId
          in: path
          required: true
          description: 메모 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemoReplyRequest'
      responses:
        '200':
          description: 답장 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoReply'
        '400':
          description: 잘못된 요청
    get:
      tags:
        - 메모
      summary: 메모 답장/채팅 목록 조회
      description: 특정 메모의 답장과 채팅 목록을 조회합니다.
      parameters:
        - name: memoId
          in: path
          required: true
          description: 메모 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 답장 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemoReply'
  /api/memos/{memoId}/participate:
    post:
      tags:
        - 메모
      summary: 메모 참여 신청
      description: 메모에 참여를 신청합니다.
      parameters:
        - name: memoId
          in: path
          required: true
          description: 메모 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipateRequest'
      responses:
        '200':
          description: 참여 신청 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoParticipant'
        '400':
          description: 잘못된 요청
  /api/memos/{memoId}/participants:
    get:
      tags:
        - 메모
      summary: 메모 참여자 목록 조회
      description: 특정 메모의 참여자 목록을 조회합니다.
      parameters:
        - name: memoId
          in: path
          required: true
          description: 메모 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 참여자 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemoParticipant'
  /api/memos/participants/{participantId}:
    put:
      tags:
        - 메모
      summary: 메모 참여 승인/거부
      description: 메모 참여 신청을 승인하거나 거부합니다.
      parameters:
        - name: participantId
          in: path
          required: true
          description: 참여자 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateParticipantStatusRequest'
      responses:
        '200':
          description: 참여 상태 업데이트 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoParticipant'
        '400':
          description: 잘못된 요청
  /api/memos/{memoId}:
    delete:
      tags:
        - 메모
      summary: 메모 삭제
      description: 메모를 삭제합니다.
      parameters:
        - name: memoId
          in: path
          required: true
          description: 메모 ID
          schema:
            type: integer
            example: 1
        - name: userId
          in: query
          required: true
          description: 사용자 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 메모 삭제 성공
        '400':
          description: 잘못된 요청
  # 알림 관련 API
  /api/notifications:
    get:
      tags:
        - 알림
      summary: 내 알림 목록 조회
      description: 현재 사용자의 알림 목록을 페이징으로 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 알림 수
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: 정렬 기준
          schema:
            type: string
            default: createdAt,desc
      responses:
        '200':
          description: 알림 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  /api/notifications/unread:
    get:
      tags:
        - 알림
      summary: 읽지 않은 알림 조회
      description: 현재 사용자의 읽지 않은 알림 목록을 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 읽지 않은 알림 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  /api/notifications/unread/count:
    get:
      tags:
        - 알림
      summary: 읽지 않은 알림 개수 조회
      description: 현재 사용자의 읽지 않은 알림 개수를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 읽지 않은 알림 개수 조회 성공
          content:
            application/json:
              schema:
                type: integer
                example: 5
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  /api/notifications/{notificationId}/read:
    post:
      tags:
        - 알림
      summary: 알림 읽음 처리
      description: 특정 알림을 읽음 처리합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          description: 알림 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 알림 읽음 처리 성공
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  /api/notifications/read-all:
    post:
      tags:
        - 알림
      summary: 모든 알림 읽음 처리
      description: 현재 사용자의 모든 알림을 읽음 처리합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 모든 알림 읽음 처리 성공
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  /api/notifications/{notificationId}:
    delete:
      tags:
        - 알림
      summary: 알림 삭제
      description: 특정 알림을 삭제합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          description: 알림 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 알림 삭제 성공
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  /api/notifications/type/{type}:
    get:
      tags:
        - 알림
      summary: 특정 타입의 알림 조회
      description: 특정 타입의 알림 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 알림 타입
          schema:
            type: string
            enum: [LIKE, COMMENT, BOOKMARK, MEMO, CHAT, SYSTEM]
            example: LIKE
      responses:
        '200':
          description: 타입별 알림 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  # 매물 관련 API
  /api/properties/nearby:
    get:
      tags:
        - 매물
      summary: 위치 기반 매물 검색
      description: 특정 위치 반경 내의 매물을 검색합니다.
      parameters:
        - name: latitude
          in: query
          required: true
          description: 위도
          schema:
            type: number
            format: double
            example: 37.5665
        - name: longitude
          in: query
          required: true
          description: 경도
          schema:
            type: number
            format: double
            example: 126.9780
        - name: radiusKm
          in: query
          description: 검색 반경 (km)
          schema:
            type: number
            format: double
            default: 1.0
            example: 2.0
      responses:
        '200':
          description: 근처 매물 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
  /api/properties/search/building:
    get:
      tags:
        - 매물
      summary: 건물명으로 매물 검색
      description: 건물명으로 매물을 검색합니다.
      parameters:
        - name: buildingName
          in: query
          required: true
          description: 건물명
          schema:
            type: string
            example: "아파트"
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 매물 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 건물명 검색 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
  /api/properties/search/address:
    get:
      tags:
        - 매물
      summary: 주소로 매물 검색
      description: 주소로 매물을 검색합니다.
      parameters:
        - name: address
          in: query
          required: true
          description: 주소
          schema:
            type: string
            example: "서울시 강남구"
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 매물 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 주소 검색 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
  /api/properties/search:
    get:
      tags:
        - 매물
      summary: 키워드로 매물 검색
      description: 키워드로 매물을 검색합니다.
      parameters:
        - name: keyword
          in: query
          required: true
          description: 검색 키워드
          schema:
            type: string
            example: "원룸"
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 매물 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 키워드 검색 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
  /api/properties/search/type:
    get:
      tags:
        - 매물
      summary: 매물 타입별 검색
      description: 매물 타입으로 매물을 검색합니다.
      parameters:
        - name: propertyType
          in: query
          required: true
          description: 매물 타입
          schema:
            type: string
            enum: [APARTMENT, STUDIO, ONE_ROOM, TWO_ROOM, THREE_ROOM, OFFICE_TEL, SHARE_HOUSE]
            example: ONE_ROOM
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 매물 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 타입별 검색 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '400':
          description: 잘못된 매물 타입
  /api/properties/search/floor:
    get:
      tags:
        - 매물
      summary: 층수 타입별 검색
      description: 층수 타입으로 매물을 검색합니다.
      parameters:
        - name: floorType
          in: query
          required: true
          description: 층수 타입
          schema:
            type: string
            enum: [GROUND, MIDDLE, HIGH, ROOFTOP]
            example: MIDDLE
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 매물 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 층수별 검색 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '400':
          description: 잘못된 층수 타입
  /api/properties/search/price:
    get:
      tags:
        - 매물
      summary: 가격 범위로 매물 검색
      description: 보증금 또는 월세 범위로 매물을 검색합니다.
      parameters:
        - name: minDeposit
          in: query
          description: 최소 보증금
          schema:
            type: number
            format: decimal
            example: 10000000
        - name: maxDeposit
          in: query
          description: 최대 보증금
          schema:
            type: number
            format: decimal
            example: 50000000
        - name: minRent
          in: query
          description: 최소 월세
          schema:
            type: number
            format: decimal
            example: 500000
        - name: maxRent
          in: query
          description: 최대 월세
          schema:
            type: number
            format: decimal
            example: 1000000
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 매물 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 가격 범위 검색 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '400':
          description: 잘못된 가격 범위
  /api/properties/search/filters:
    get:
      tags:
        - 매물
      summary: 복합 필터로 매물 검색
      description: 여러 조건을 조합하여 매물을 검색합니다.
      parameters:
        - name: propertyType
          in: query
          description: 매물 타입
          schema:
            type: string
            enum: [APARTMENT, STUDIO, ONE_ROOM, TWO_ROOM, THREE_ROOM, OFFICE_TEL, SHARE_HOUSE]
        - name: floorType
          in: query
          description: 층수 타입
          schema:
            type: string
            enum: [GROUND, MIDDLE, HIGH, ROOFTOP]
        - name: minDeposit
          in: query
          description: 최소 보증금
          schema:
            type: number
            format: decimal
        - name: maxDeposit
          in: query
          description: 최대 보증금
          schema:
            type: number
            format: decimal
        - name: minRent
          in: query
          description: 최소 월세
          schema:
            type: number
            format: decimal
        - name: maxRent
          in: query
          description: 최대 월세
          schema:
            type: number
            format: decimal
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 매물 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 복합 필터 검색 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '400':
          description: 잘못된 필터 조건
  /api/properties/popular:
    get:
      tags:
        - 매물
      summary: 인기 매물 조회
      description: 스크랩 수가 많은 인기 매물을 조회합니다.
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 매물 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 인기 매물 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
  /api/properties/recent:
    get:
      tags:
        - 매물
      summary: 최근 등록된 매물 조회
      description: 최근에 등록된 매물을 조회합니다.
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 매물 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 최근 매물 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
  /api/properties:
    post:
      tags:
        - 매물
      summary: 매물 생성
      description: 새로운 매물을 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePropertyRequest'
      responses:
        '200':
          description: 매물 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          description: 잘못된 요청
  /api/properties/{propertyId}:
    get:
      tags:
        - 매물
      summary: 매물 상세 조회
      description: 특정 매물의 상세 정보를 조회합니다.
      parameters:
        - name: propertyId
          in: path
          required: true
          description: 매물 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 매물 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '404':
          description: 매물을 찾을 수 없음
    put:
      tags:
        - 매물
      summary: 매물 수정
      description: 기존 매물 정보를 수정합니다.
      parameters:
        - name: propertyId
          in: path
          required: true
          description: 매물 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertyRequest'
      responses:
        '200':
          description: 매물 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          description: 잘못된 요청
    delete:
      tags:
        - 매물
      summary: 매물 삭제
      description: 매물을 삭제합니다.
      parameters:
        - name: propertyId
          in: path
          required: true
          description: 매물 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 매물 삭제 성공
        '400':
          description: 잘못된 요청
  /api/properties/search/places:
    get:
      tags:
        - 매물
      summary: 네이버 API - 지역 검색
      description: 네이버 지역 검색 API를 사용하여 장소를 검색합니다.
      parameters:
        - name: query
          in: query
          required: true
          description: 검색 쿼리
          schema:
            type: string
            example: "강남역"
        - name: display
          in: query
          description: 검색 결과 개수
          schema:
            type: integer
            default: 10
            example: 20
      responses:
        '200':
          description: 지역 검색 성공
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/properties/geocode:
    get:
      tags:
        - 매물
      summary: 네이버 API - 주소를 좌표로 변환
      description: 주소를 위도, 경도 좌표로 변환합니다.
      parameters:
        - name: address
          in: query
          required: true
          description: 주소
          schema:
            type: string
            example: "서울시 강남구 테헤란로 123"
      responses:
        '200':
          description: 좌표 변환 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  latitude:
                    type: number
                    format: double
                    example: 37.5665
                  longitude:
                    type: number
                    format: double
                    example: 126.9780
  /api/properties/reverse-geocode:
    get:
      tags:
        - 매물
      summary: 네이버 API - 좌표를 주소로 변환
      description: 위도, 경도 좌표를 주소로 변환합니다.
      parameters:
        - name: latitude
          in: query
          required: true
          description: 위도
          schema:
            type: number
            format: double
            example: 37.5665
        - name: longitude
          in: query
          required: true
          description: 경도
          schema:
            type: number
            format: double
            example: 126.9780
      responses:
        '200':
          description: 주소 변환 성공
          content:
            application/json:
              schema:
                type: string
                example: "서울시 강남구 테헤란로 123"
  /api/properties/distance:
    get:
      tags:
        - 매물
      summary: 거리 계산
      description: 두 좌표 간의 거리를 계산합니다.
      parameters:
        - name: lat1
          in: query
          required: true
          description: 첫 번째 지점 위도
          schema:
            type: number
            format: double
            example: 37.5665
        - name: lon1
          in: query
          required: true
          description: 첫 번째 지점 경도
          schema:
            type: number
            format: double
            example: 126.9780
        - name: lat2
          in: query
          required: true
          description: 두 번째 지점 위도
          schema:
            type: number
            format: double
            example: 37.5666
        - name: lon2
          in: query
          required: true
          description: 두 번째 지점 경도
          schema:
            type: number
            format: double
            example: 126.9781
      responses:
        '200':
          description: 거리 계산 성공
          content:
            application/json:
              schema:
                type: number
                format: double
                example: 0.1
  /api/properties/{propertyId}/scrap:
    post:
      tags:
        - 매물
      summary: 매물 스크랩 토글
      description: 매물을 스크랩에 추가하거나 제거합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: propertyId
          in: path
          required: true
          description: 매물 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 스크랩 토글 성공
          content:
            application/json:
              schema:
                type: string
                example: "매물을 스크랩했습니다."
        '400':
          description: 스크랩 처리 중 오류
        '401':
          description: 인증 실패
        '404':
          description: 매물을 찾을 수 없음
  # 거주지 인증 관련 API
  /api/verification/request:
    post:
      tags:
        - 거주지 인증
      summary: 거주지 인증 신청
      description: 거주지 인증을 신청합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationRequest'
      responses:
        '200':
          description: 인증 신청 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidenceVerification'
        '400':
          description: 잘못된 요청
  /api/verification/user/{userId}:
    get:
      tags:
        - 거주지 인증
      summary: 사용자의 인증 상태 조회
      description: 특정 사용자의 거주지 인증 상태를 조회합니다.
      parameters:
        - name: userId
          in: path
          required: true
          description: 사용자 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 인증 상태 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidenceVerification'
        '404':
          description: 인증 정보를 찾을 수 없음
  /api/verification/user/{userId}/approved:
    get:
      tags:
        - 거주지 인증
      summary: 사용자의 승인된 인증 조회
      description: 특정 사용자의 승인된 거주지 인증 정보를 조회합니다.
      parameters:
        - name: userId
          in: path
          required: true
          description: 사용자 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 승인된 인증 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidenceVerification'
        '404':
          description: 승인된 인증 정보를 찾을 수 없음
  /api/verification/pending:
    get:
      tags:
        - 거주지 인증
      summary: 대기 중인 인증 신청 목록 조회
      description: 관리자가 대기 중인 거주지 인증 신청 목록을 조회합니다.
      responses:
        '200':
          description: 대기 중인 인증 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResidenceVerification'
  /api/verification/{verificationId}/approve:
    post:
      tags:
        - 거주지 인증
      summary: 거주지 인증 승인
      description: 관리자가 거주지 인증을 승인합니다.
      parameters:
        - name: verificationId
          in: path
          required: true
          description: 인증 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminActionRequest'
      responses:
        '200':
          description: 인증 승인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidenceVerification'
        '400':
          description: 잘못된 요청
  /api/verification/{verificationId}/reject:
    post:
      tags:
        - 거주지 인증
      summary: 거주지 인증 거부
      description: 관리자가 거주지 인증을 거부합니다.
      parameters:
        - name: verificationId
          in: path
          required: true
          description: 인증 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminActionRequest'
      responses:
        '200':
          description: 인증 거부 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResidenceVerification'
        '400':
          description: 잘못된 요청
  /api/verification/{verificationId}:
    delete:
      tags:
        - 거주지 인증
      summary: 거주지 인증 취소
      description: 거주지 인증 신청을 취소합니다.
      parameters:
        - name: verificationId
          in: path
          required: true
          description: 인증 ID
          schema:
            type: integer
            example: 1
        - name: userId
          in: query
          required: true
          description: 사용자 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 인증 취소 성공
        '400':
          description: 잘못된 요청
  /api/verification/building/{buildingId}:
    get:
      tags:
        - 거주지 인증
      summary: 건물별 인증된 사용자 조회
      description: 특정 건물에 거주지 인증을 받은 사용자 목록을 조회합니다.
      parameters:
        - name: buildingId
          in: path
          required: true
          description: 건물 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 인증된 사용자 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResidenceVerification'
  # 스크랩 관련 API
  /api/scraps/properties:
    get:
      tags:
        - 스크랩
      summary: 내가 스크랩한 매물 목록 조회
      description: 현재 사용자가 스크랩한 매물 목록을 페이징으로 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 스크랩 수
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: 정렬 기준
          schema:
            type: string
            default: createdAt,desc
      responses:
        '200':
          description: 스크랩 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/PropertyScrap'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  # 댓글 관리
  /api/posts/{postId}/comments:
    post:
      tags:
        - 댓글
      summary: 댓글 작성
      description: 게시물에 댓글을 작성합니다. 게시물의 댓글 수가 1 증가합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: 댓글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '404':
          description: 게시글을 찾을 수 없음
    get:
      tags:
        - 댓글
      summary: 댓글 목록 조회
      description: 게시물의 댓글 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 댓글 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 댓글 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentResponse'
        '401':
          description: 인증 필요
        '404':
          description: 게시글을 찾을 수 없음
  /api/comments/{parentCommentId}/replies:
    post:
      tags:
        - 댓글
      summary: 대댓글 작성
      description: 부모 댓글에 대댓글을 작성합니다. 게시물의 댓글 수가 1 증가합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: parentCommentId
          in: path
          required: true
          description: 부모 댓글 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: 대댓글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '404':
          description: 부모 댓글을 찾을 수 없음
  /api/comments/{commentId}:
    put:
      tags:
        - 댓글
      summary: 댓글 수정
      description: 내가 작성한 댓글만 수정할 수 있습니다.
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          description: 댓글 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: 댓글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '403':
          description: 수정 권한 없음
        '404':
          description: 댓글을 찾을 수 없음
    delete:
      tags:
        - 댓글
      summary: 댓글 삭제
      description: 내가 작성한 댓글만 삭제할 수 있습니다.
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          description: 댓글 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 댓글 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 댓글이 삭제되었습니다.
        '401':
          description: 인증 필요
        '403':
          description: 삭제 권한 없음
        '404':
          description: 댓글을 찾을 수 없음
  # 채팅 관리
  /api/chat/rooms:
    post:
      tags:
        - 채팅
      summary: 채팅방 생성/조회
      description: 이미 채팅방이 있으면 기존 방 반환, 없으면 새 방 생성
      security:
        - bearerAuth: []
      parameters:
        - name: otherUserName
          in: query
          required: true
          description: 상대방 사용자 닉네임
          schema:
            type: string
            example: 홍길동
      responses:
        '200':
          description: 채팅방 조회/생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoomResponse'
              example:
                id: 1
                otherUserName: 홍길동
                otherUserNickname: 홍길동
                otherUserProfileImage: https://example.com/profile.jpg
                createdAt: '2024-01-15T10:30:00'
                lastMessageTime: '2024-01-15T14:25:00'
                lastMessageContent: 안녕하세요!
                unreadCount: 3
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  /api/chat/rooms/user/{userName}:
    get:
      tags:
        - 채팅
      summary: 사용자 채팅방 목록
      description: 특정 사용자의 채팅방 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: userName
          in: path
          required: true
          description: 사용자 닉네임
          schema:
            type: string
            example: 홍길동
      responses:
        '200':
          description: 채팅방 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatRoomResponse'
        '401':
          description: 인증 필요
        '403':
          description: 다른 사용자의 채팅방 목록 조회 권한 없음
  /api/chat/rooms/{roomId}:
    get:
      tags:
        - 채팅
      summary: 특정 채팅방 조회
      description: 특정 채팅방의 정보를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: 채팅방 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 채팅방 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoomResponse'
        '404':
          description: 채팅방을 찾을 수 없음
        '403':
          description: 채팅방 접근 권한 없음
  /api/chat/rooms/users/{user1Name}/{user2Name}:
    get:
      tags:
        - 채팅
      summary: 두 사용자 간 채팅방 조회
      description: 두 사용자 간의 채팅방을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: user1Name
          in: path
          required: true
          description: 사용자1 닉네임
          schema:
            type: string
            example: 홍길동
        - name: user2Name
          in: path
          required: true
          description: 사용자2 닉네임
          schema:
            type: string
            example: 김철수
      responses:
        '200':
          description: 채팅방 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoomResponse'
        '404':
          description: 채팅방을 찾을 수 없음
        '403':
          description: 채팅방 접근 권한 없음
  /api/chat/rooms/{roomId}/messages:
    post:
      tags:
        - 채팅
      summary: 메시지 전송
      description: 채팅방에 메시지를 전송합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: 채팅방 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
            example:
              content: 안녕하세요!
              messageType: TEXT
      responses:
        '200':
          description: 메시지 전송 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageResponse'
              example:
                id: 1
                content: 안녕하세요!
                imageUrl: null
                messageType: TEXT
                senderName: 홍길동
                senderNickname: 홍길동
                senderProfileImage: https://example.com/profile.jpg
                createdAt: '2024-01-15T14:25:00'
                isFromCurrentUser: true
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '403':
          description: 채팅방 접근 권한 없음
    get:
      tags:
        - 채팅
      summary: 메시지 목록 조회
      description: 채팅방의 메시지 목록을 조회합니다. (페이징 지원)
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: 채팅방 ID
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: 페이지 번호 (0부터 시작)
          schema:
            type: integer
            default: 0
            example: 0
        - name: size
          in: query
          description: 페이지당 메시지 수
          schema:
            type: integer
            default: 20
            example: 20
      responses:
        '200':
          description: 메시지 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessageResponse'
        '404':
          description: 채팅방을 찾을 수 없음
        '403':
          description: 채팅방 접근 권한 없음
  /api/chat/rooms/{roomId}/read:
    post:
      tags:
        - 채팅
      summary: 메시지 읽음 처리
      description: 채팅방의 메시지를 읽음 처리합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: 채팅방 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 읽음 처리 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 읽음 처리 완료
        '401':
          description: 인증 필요
        '403':
          description: 채팅방 접근 권한 없음
  /api/chat/unread-count/{userName}:
    get:
      tags:
        - 채팅
      summary: 읽지 않은 메시지 수 조회
      description: 사용자의 읽지 않은 메시지 수를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: userName
          in: path
          required: true
          description: 사용자 닉네임
          schema:
            type: string
            example: 홍길동
      responses:
        '200':
          description: 읽지 않은 메시지 수 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  unreadCount:
                    type: integer
                    example: 5
        '401':
          description: 인증 필요
        '403':
          description: 다른 사용자의 읽지 않은 메시지 수 조회 권한 없음
  /api/chat/rooms/{roomId}/unread-count/{userName}:
    get:
      tags:
        - 채팅
      summary: 특정 채팅방 읽지 않은 메시지 수
      description: 특정 채팅방의 읽지 않은 메시지 수를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: 채팅방 ID
          schema:
            type: integer
            example: 1
        - name: userName
          in: path
          required: true
          description: 사용자 닉네임
          schema:
            type: string
            example: 홍길동
      responses:
        '200':
          description: 읽지 않은 메시지 수 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  unreadCount:
                    type: integer
                    example: 2
        '401':
          description: 인증 필요
        '403':
          description: 채팅방 접근 권한 없음
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 토큰을 입력하세요. 예: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  schemas:
    # 인증 관련 스키마
    RegisterRequest:
      type: object
      description: 회원가입 요청
      required:
        - email
        - password
        - nickname
        - userType
      properties:
        email:
          type: string
          format: email
          description: 이메일
          example: user@example.com
        password:
          type: string
          description: 비밀번호
          example: password123
        nickname:
          type: string
          description: 닉네임
          example: 홍길동
        userType:
          type: string
          enum: [STUDENT, GRADUATE, OTHER]
          description: 사용자 타입
          example: STUDENT
        location:
          type: string
          description: 거주 지역
          example: 서울시 강남구
        university:
          type: string
          description: 대학교
          example: 경희대학교
        major:
          type: string
          description: 전공
          example: 컴퓨터공학과
    LoginRequest:
      type: object
      description: 로그인 요청
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: 이메일
          example: user@example.com
        password:
          type: string
          description: 비밀번호
          example: password123
    ChangePasswordRequest:
      type: object
      description: 비밀번호 변경 요청
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: 현재 비밀번호
          example: oldpassword123
        newPassword:
          type: string
          description: 새 비밀번호
          example: newpassword123
    UpdateProfileRequest:
      type: object
      description: 프로필 수정 요청
      properties:
        nickname:
          type: string
          description: 닉네임
          example: 홍길동
        location:
          type: string
          description: 거주 지역
          example: 서울시 강남구
        university:
          type: string
          description: 대학교
          example: 경희대학교
        major:
          type: string
          description: 전공
          example: 컴퓨터공학과
        introduction:
          type: string
          description: 자기소개
          example: 안녕하세요! 컴퓨터공학과 학생입니다.
    UserInfo:
      type: object
      description: 사용자 정보
      properties:
        id:
          type: integer
          description: 사용자 ID
          example: 1
        email:
          type: string
          description: 이메일
          example: user@example.com
        nickname:
          type: string
          description: 닉네임
          example: 홍길동
        userType:
          type: string
          enum: [STUDENT, GRADUATE, OTHER]
          description: 사용자 타입
          example: STUDENT
        location:
          type: string
          description: 거주 지역
          example: 서울시 강남구
        university:
          type: string
          description: 대학교
          example: 경희대학교
        major:
          type: string
          description: 전공
          example: 컴퓨터공학과
    UserProfile:
      type: object
      description: 사용자 프로필 정보
      properties:
        id:
          type: integer
          description: 사용자 ID
          example: 1
        email:
          type: string
          description: 이메일
          example: user@example.com
        nickname:
          type: string
          description: 닉네임
          example: 홍길동
        profileImage:
          type: string
          description: 프로필 이미지 URL
          example: https://example.com/profile.jpg
        characterImage:
          type: string
          description: 캐릭터 이미지 URL
          example: https://example.com/character.jpg
        userType:
          type: string
          enum: [STUDENT, GRADUATE, OTHER]
          description: 사용자 타입
          example: STUDENT
        isVerified:
          type: boolean
          description: 거주지 인증 여부
          example: true
        verifiedBuildingName:
          type: string
          description: 인증된 건물명
          example: 경희대학교 기숙사
        points:
          type: integer
          description: 보유 포인트
          example: 1000
        mainCharacterId:
          type: integer
          description: 대표 캐릭터 ID
          example: 1
        location:
          type: string
          description: 거주 지역
          example: 서울시 강남구
        university:
          type: string
          description: 대학교
          example: 경희대학교
        major:
          type: string
          description: 전공
          example: 컴퓨터공학과
        introduction:
          type: string
          description: 자기소개
          example: 안녕하세요! 컴퓨터공학과 학생입니다.
    MyPageUpdateProfileRequest:
      type: object
      description: 마이페이지 프로필 수정 요청
      properties:
        nickname:
          type: string
          description: 닉네임
          example: 홍길동
        profileImage:
          type: string
          description: 프로필 이미지 URL
          example: https://example.com/profile.jpg
        characterImage:
          type: string
          description: 캐릭터 이미지 URL
          example: https://example.com/character.jpg
        location:
          type: string
          description: 거주 지역
          example: 서울시 강남구
        university:
          type: string
          description: 대학교
          example: 경희대학교
        major:
          type: string
          description: 전공
          example: 컴퓨터공학과
        introduction:
          type: string
          description: 자기소개
          example: 안녕하세요! 컴퓨터공학과 학생입니다.
    User:
      type: object
      description: 사용자 엔티티
      properties:
        id:
          type: integer
          description: 사용자 ID
          example: 1
        email:
          type: string
          description: 이메일
          example: user@example.com
        nickname:
          type: string
          description: 닉네임
          example: 홍길동
        profileImage:
          type: string
          description: 프로필 이미지 URL
          example: https://example.com/profile.jpg
        characterImage:
          type: string
          description: 캐릭터 이미지 URL
          example: https://example.com/character.jpg
        userType:
          type: string
          enum: [STUDENT, GRADUATE, OTHER]
          description: 사용자 타입
          example: STUDENT
        isVerified:
          type: boolean
          description: 거주지 인증 여부
          example: true
        verifiedBuildingName:
          type: string
          description: 인증된 건물명
          example: 경희대학교 기숙사
        points:
          type: integer
          description: 보유 포인트
          example: 1000
        mainCharacterId:
          type: integer
          description: 대표 캐릭터 ID
          example: 1
        location:
          type: string
          description: 거주 지역
          example: 서울시 강남구
        university:
          type: string
          description: 대학교
          example: 경희대학교
        major:
          type: string
          description: 전공
          example: 컴퓨터공학과
        introduction:
          type: string
          description: 자기소개
          example: 안녕하세요! 컴퓨터공학과 학생입니다.
        createdAt:
          type: string
          format: date-time
          description: 생성 시간
          example: '2024-01-15T10:30:00'
        updatedAt:
          type: string
          format: date-time
          description: 수정 시간
          example: '2024-01-15T14:25:00'
    Post:
      type: object
      description: 게시글 엔티티
      properties:
        id:
          type: integer
          description: 게시글 ID
          example: 1
        title:
          type: string
          description: 제목
          example: 자취방 구합니다
        content:
          type: string
          description: 내용
          example: 경기도 성남시 자취방 구합니다...
        authorId:
          type: integer
          description: 작성자 ID
          example: 1
        boardType:
          type: string
          description: 게시판 타입
          example: free
        likeCount:
          type: integer
          description: 좋아요 수
          example: 15
        scrapCount:
          type: integer
          description: 스크랩 수
          example: 8
        commentCount:
          type: integer
          description: 댓글 수
          example: 23
        viewCount:
          type: integer
          description: 조회수
          example: 156
        createdAt:
          type: string
          format: date-time
          description: 생성 시간
          example: '2024-01-15T10:30:00'
        updatedAt:
          type: string
          format: date-time
          description: 수정 시간
          example: '2024-01-15T14:25:00'
    Comment:
      type: object
      description: 댓글 엔티티
      properties:
        id:
          type: integer
          description: 댓글 ID
          example: 1
        content:
          type: string
          description: 댓글 내용
          example: 좋은 자취방이네요! 연락드릴게요.
        authorId:
          type: integer
          description: 작성자 ID
          example: 2
        postId:
          type: integer
          description: 게시글 ID
          example: 1
        parentCommentId:
          type: integer
          description: 부모 댓글 ID (대댓글인 경우)
          example: null
        createdAt:
          type: string
          format: date-time
          description: 생성 시간
          example: '2024-01-15T14:25:00'
        updatedAt:
          type: string
          format: date-time
          description: 수정 시간
          example: '2024-01-15T14:25:00'
    Bookmark:
      type: object
      description: 북마크 엔티티
      properties:
        id:
          type: integer
          description: 북마크 ID
          example: 1
        userId:
          type: integer
          description: 사용자 ID
          example: 1
        postId:
          type: integer
          description: 게시글 ID
          example: 1
        createdAt:
          type: string
          format: date-time
          description: 생성 시간
          example: '2024-01-15T14:25:00'
    BookmarkResponse:
      type: object
      description: 북마크 응답 정보
      properties:
        isBookmarked:
          type: boolean
          description: 북마크 여부
          example: true
    Character:
      type: object
      description: 캐릭터 정보
      properties:
        id:
          type: integer
          description: 캐릭터 ID
          example: 1
        name:
          type: string
          description: 캐릭터 이름
          example: "귀여운 고양이"
        description:
          type: string
          description: 캐릭터 설명
          example: "매우 귀여운 고양이 캐릭터입니다."
        imageUrl:
          type: string
          description: 캐릭터 이미지 URL
          example: "https://example.com/cat.png"
        rarity:
          type: string
          enum: [COMMON, RARE, EPIC, LEGENDARY]
          description: 캐릭터 희귀도
          example: "RARE"
        price:
          type: integer
          description: 캐릭터 가격
          example: 1000
        isActive:
          type: boolean
          description: 활성화 여부
          example: true
    Memo:
      type: object
      description: 메모 정보
      properties:
        id:
          type: integer
          description: 메모 ID
          example: 1
        content:
          type: string
          description: 메모 내용
          example: "룸메이트 구해요!"
        imageUrl:
          type: string
          description: 메모 이미지 URL
          example: "https://example.com/memo.jpg"
        type:
          type: string
          enum: [ROOMMATE, STUDY, EVENT, ETC]
          description: 메모 타입
          example: "ROOMMATE"
        location:
          type: string
          description: 위치
          example: "서울시 강남구"
        maxParticipants:
          type: integer
          description: 최대 참여자 수
          example: 3
        contactInfo:
          type: string
          description: 연락처 정보
          example: "010-1234-5678"
        deadline:
          type: string
          format: date-time
          description: 마감일
          example: "2024-12-31T23:59:59"
        isActive:
          type: boolean
          description: 활성화 여부
          example: true
        createdAt:
          type: string
          format: date-time
          description: 생성일시
          example: "2024-01-01T00:00:00"
    CreateMemoRequest:
      type: object
      description: 메모 생성 요청
      required:
        - userId
        - content
        - type
      properties:
        userId:
          type: integer
          description: 사용자 ID
          example: 1
        content:
          type: string
          description: 메모 내용
          example: "룸메이트 구해요!"
        imageUrl:
          type: string
          description: 메모 이미지 URL
          example: "https://example.com/memo.jpg"
        type:
          type: string
          enum: [ROOMMATE, STUDY, EVENT, ETC]
          description: 메모 타입
          example: "ROOMMATE"
        location:
          type: string
          description: 위치
          example: "서울시 강남구"
        maxParticipants:
          type: integer
          description: 최대 참여자 수
          example: 3
        contactInfo:
          type: string
          description: 연락처 정보
          example: "010-1234-5678"
        deadline:
          type: string
          format: date-time
          description: 마감일
          example: "2024-12-31T23:59:59"
    MemoReply:
      type: object
      description: 메모 답장/채팅 정보
      properties:
        id:
          type: integer
          description: 답장 ID
          example: 1
        content:
          type: string
          description: 답장 내용
          example: "관심있어요!"
        imageUrl:
          type: string
          description: 답장 이미지 URL
          example: "https://example.com/reply.jpg"
        type:
          type: string
          enum: [REPLY, CHAT]
          description: 답장 타입
          example: "REPLY"
        createdAt:
          type: string
          format: date-time
          description: 생성일시
          example: "2024-01-01T00:00:00"
    CreateMemoReplyRequest:
      type: object
      description: 메모 답장/채팅 생성 요청
      required:
        - userId
        - content
        - type
      properties:
        userId:
          type: integer
          description: 사용자 ID
          example: 1
        content:
          type: string
          description: 답장 내용
          example: "관심있어요!"
        imageUrl:
          type: string
          description: 답장 이미지 URL
          example: "https://example.com/reply.jpg"
        type:
          type: string
          enum: [REPLY, CHAT]
          description: 답장 타입
          example: "REPLY"
    MemoParticipant:
      type: object
      description: 메모 참여자 정보
      properties:
        id:
          type: integer
          description: 참여자 ID
          example: 1
        message:
          type: string
          description: 참여 신청 메시지
          example: "함께 살고 싶어요!"
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
          description: 참여 상태
          example: "PENDING"
        createdAt:
          type: string
          format: date-time
          description: 신청일시
          example: "2024-01-01T00:00:00"
    ParticipateRequest:
      type: object
      description: 메모 참여 신청 요청
      required:
        - userId
      properties:
        userId:
          type: integer
          description: 사용자 ID
          example: 1
        message:
          type: string
          description: 참여 신청 메시지
          example: "함께 살고 싶어요!"
    UpdateParticipantStatusRequest:
      type: object
      description: 참여자 상태 업데이트 요청
      required:
        - status
      properties:
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
          description: 참여 상태
          example: "APPROVED"
    Notification:
      type: object
      description: 알림 정보
      properties:
        id:
          type: integer
          description: 알림 ID
          example: 1
        title:
          type: string
          description: 알림 제목
          example: "새로운 좋아요가 있습니다"
        content:
          type: string
          description: 알림 내용
          example: "홍길동님이 당신의 게시글을 좋아합니다"
        type:
          type: string
          enum: [LIKE, COMMENT, BOOKMARK, MEMO, CHAT, SYSTEM]
          description: 알림 타입
          example: "LIKE"
        isRead:
          type: boolean
          description: 읽음 여부
          example: false
        createdAt:
          type: string
          format: date-time
          description: 생성일시
          example: "2024-01-01T00:00:00"
    Property:
      type: object
      description: 매물 정보
      properties:
        id:
          type: integer
          description: 매물 ID
          example: 1
        buildingName:
          type: string
          description: 건물명
          example: "강남 아파트"
        address:
          type: string
          description: 주소
          example: "서울시 강남구 테헤란로 123"
        detailAddress:
          type: string
          description: 상세주소
          example: "101동 1001호"
        propertyType:
          type: string
          enum: [APARTMENT, STUDIO, ONE_ROOM, TWO_ROOM, THREE_ROOM, OFFICE_TEL, SHARE_HOUSE]
          description: 매물 타입
          example: "ONE_ROOM"
        deposit:
          type: number
          format: decimal
          description: 보증금
          example: 10000000
        monthlyRent:
          type: number
          format: decimal
          description: 월세
          example: 500000
        managementFee:
          type: number
          format: decimal
          description: 관리비
          example: 100000
        floor:
          type: integer
          description: 층수
          example: 5
        floorType:
          type: string
          enum: [GROUND, MIDDLE, HIGH, ROOFTOP]
          description: 층수 타입
          example: "MIDDLE"
        area:
          type: number
          format: double
          description: 면적 (제곱미터)
          example: 25.5
        rooms:
          type: integer
          description: 방 개수
          example: 1
        bathrooms:
          type: integer
          description: 화장실 개수
          example: 1
        structure:
          type: string
          description: 구조
          example: "원룸"
        description:
          type: string
          description: 매물 설명
          example: "깔끔하고 조용한 원룸입니다"
        options:
          type: string
          description: 옵션
          example: "에어컨, 냉장고, 세탁기"
        contactInfo:
          type: string
          description: 연락처 정보
          example: "010-1234-5678"
        agentName:
          type: string
          description: 중개인 이름
          example: "김중개"
        agentPhone:
          type: string
          description: 중개인 전화번호
          example: "02-1234-5678"
        status:
          type: string
          enum: [AVAILABLE, RENTED, UNAVAILABLE]
          description: 매물 상태
          example: "AVAILABLE"
        viewCount:
          type: integer
          description: 조회수
          example: 100
        scrapCount:
          type: integer
          description: 스크랩 수
          example: 15
        createdAt:
          type: string
          format: date-time
          description: 등록일시
          example: "2024-01-01T00:00:00"
    CreatePropertyRequest:
      type: object
      description: 매물 생성 요청
      required:
        - buildingName
        - address
        - propertyType
        - deposit
        - monthlyRent
      properties:
        buildingName:
          type: string
          description: 건물명
          example: "강남 아파트"
        address:
          type: string
          description: 주소
          example: "서울시 강남구 테헤란로 123"
        detailAddress:
          type: string
          description: 상세주소
          example: "101동 1001호"
        propertyType:
          type: string
          enum: [APARTMENT, STUDIO, ONE_ROOM, TWO_ROOM, THREE_ROOM, OFFICE_TEL, SHARE_HOUSE]
          description: 매물 타입
          example: "ONE_ROOM"
        deposit:
          type: number
          format: decimal
          description: 보증금
          example: 10000000
        monthlyRent:
          type: number
          format: decimal
          description: 월세
          example: 500000
        managementFee:
          type: number
          format: decimal
          description: 관리비
          example: 100000
        floor:
          type: integer
          description: 층수
          example: 5
        floorType:
          type: string
          enum: [GROUND, MIDDLE, HIGH, ROOFTOP]
          description: 층수 타입
          example: "MIDDLE"
        area:
          type: number
          format: double
          description: 면적 (제곱미터)
          example: 25.5
        rooms:
          type: integer
          description: 방 개수
          example: 1
        bathrooms:
          type: integer
          description: 화장실 개수
          example: 1
        structure:
          type: string
          description: 구조
          example: "원룸"
        description:
          type: string
          description: 매물 설명
          example: "깔끔하고 조용한 원룸입니다"
        options:
          type: string
          description: 옵션
          example: "에어컨, 냉장고, 세탁기"
        contactInfo:
          type: string
          description: 연락처 정보
          example: "010-1234-5678"
        agentName:
          type: string
          description: 중개인 이름
          example: "김중개"
        agentPhone:
          type: string
          description: 중개인 전화번호
          example: "02-1234-5678"
    UpdatePropertyRequest:
      type: object
      description: 매물 수정 요청
      properties:
        buildingName:
          type: string
          description: 건물명
          example: "강남 아파트"
        address:
          type: string
          description: 주소
          example: "서울시 강남구 테헤란로 123"
        detailAddress:
          type: string
          description: 상세주소
          example: "101동 1001호"
        propertyType:
          type: string
          enum: [APARTMENT, STUDIO, ONE_ROOM, TWO_ROOM, THREE_ROOM, OFFICE_TEL, SHARE_HOUSE]
          description: 매물 타입
          example: "ONE_ROOM"
        deposit:
          type: number
          format: decimal
          description: 보증금
          example: 10000000
        monthlyRent:
          type: number
          format: decimal
          description: 월세
          example: 500000
        managementFee:
          type: number
          format: decimal
          description: 관리비
          example: 100000
        floor:
          type: integer
          description: 층수
          example: 5
        floorType:
          type: string
          enum: [GROUND, MIDDLE, HIGH, ROOFTOP]
          description: 층수 타입
          example: "MIDDLE"
        area:
          type: number
          format: double
          description: 면적 (제곱미터)
          example: 25.5
        rooms:
          type: integer
          description: 방 개수
          example: 1
        bathrooms:
          type: integer
          description: 화장실 개수
          example: 1
        structure:
          type: string
          description: 구조
          example: "원룸"
        description:
          type: string
          description: 매물 설명
          example: "깔끔하고 조용한 원룸입니다"
        options:
          type: string
          description: 옵션
          example: "에어컨, 냉장고, 세탁기"
        contactInfo:
          type: string
          description: 연락처 정보
          example: "010-1234-5678"
        agentName:
          type: string
          description: 중개인 이름
          example: "김중개"
        agentPhone:
          type: string
          description: 중개인 전화번호
          example: "02-1234-5678"
    PropertyScrap:
      type: object
      description: 매물 스크랩 정보
      properties:
        id:
          type: integer
          description: 스크랩 ID
          example: 1
        property:
          $ref: '#/components/schemas/Property'
        createdAt:
          type: string
          format: date-time
          description: 스크랩 일시
          example: "2024-01-01T00:00:00"
    ResidenceVerification:
      type: object
      description: 거주지 인증 정보
      properties:
        id:
          type: integer
          description: 인증 ID
          example: 1
        userId:
          type: integer
          description: 사용자 ID
          example: 1
        buildingId:
          type: integer
          description: 건물 ID
          example: 1
        buildingName:
          type: string
          description: 건물명
          example: "강남 아파트"
        buildingAddress:
          type: string
          description: 건물 주소
          example: "서울시 강남구 테헤란로 123"
        roomNumber:
          type: string
          description: 호수
          example: "101동 1001호"
        verificationDocument:
          type: string
          description: 인증 서류
          example: "https://example.com/document.jpg"
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
          description: 인증 상태
          example: "PENDING"
        adminComment:
          type: string
          description: 관리자 코멘트
          example: "인증 완료"
        requestedAt:
          type: string
          format: date-time
          description: 신청일시
          example: "2024-01-01T00:00:00"
        verifiedAt:
          type: string
          format: date-time
          description: 인증일시
          example: "2024-01-02T00:00:00"
    VerificationRequest:
      type: object
      description: 거주지 인증 신청 요청
      required:
        - userId
        - buildingName
        - buildingAddress
        - roomNumber
        - verificationDocument
      properties:
        userId:
          type: integer
          description: 사용자 ID
          example: 1
        buildingId:
          type: integer
          description: 건물 ID
          example: 1
        buildingName:
          type: string
          description: 건물명
          example: "강남 아파트"
        buildingAddress:
          type: string
          description: 건물 주소
          example: "서울시 강남구 테헤란로 123"
        roomNumber:
          type: string
          description: 호수
          example: "101동 1001호"
        verificationDocument:
          type: string
          description: 인증 서류
          example: "https://example.com/document.jpg"
    AdminActionRequest:
      type: object
      description: 관리자 액션 요청
      required:
        - adminId
      properties:
        adminId:
          type: integer
          description: 관리자 ID
          example: 1
        comment:
          type: string
          description: 관리자 코멘트
          example: "인증 완료"
    UserCharacter:
      type: object
      description: 사용자 캐릭터 엔티티
      properties:
        id:
          type: integer
          description: 사용자 캐릭터 ID
          example: 1
        userId:
          type: integer
          description: 사용자 ID
          example: 1
        characterId:
          type: integer
          description: 캐릭터 ID
          example: 1
        isMain:
          type: boolean
          description: 대표 캐릭터 여부
          example: false
        obtainedAt:
          type: string
          format: date-time
          description: 획득 시간
          example: '2024-01-15T14:25:00'
    PointHistory:
      type: object
      description: 포인트 내역 엔티티
      properties:
        id:
          type: integer
          description: 포인트 내역 ID
          example: 1
        userId:
          type: integer
          description: 사용자 ID
          example: 1
        amount:
          type: integer
          description: 포인트 변동량
          example: 100
        type:
          type: string
          enum: [EARN, SPEND]
          description: 포인트 타입
          example: EARN
        description:
          type: string
          description: 설명
          example: 게시글 작성으로 포인트 획득
        createdAt:
          type: string
          format: date-time
          description: 생성 시간
          example: '2024-01-15T14:25:00'
    UserPointStats:
      type: object
      description: 사용자 포인트 통계
      properties:
        totalEarned:
          type: integer
          description: 총 획득 포인트
          example: 5000
        totalSpent:
          type: integer
          description: 총 사용 포인트
          example: 2000
        currentBalance:
          type: integer
          description: 현재 잔액
          example: 3000
    ResidenceInfo:
      type: object
      description: 거주지 정보
      properties:
        buildingId:
          type: integer
          description: 건물 ID
          example: 1
        buildingName:
          type: string
          description: 건물명
          example: 경희대학교 기숙사
        buildingAddress:
          type: string
          description: 건물 주소
          example: 서울시 동대문구 경희대로 26
        roomNumber:
          type: string
          description: 호실
          example: 101호
        verifiedAt:
          type: string
          format: date-time
          description: 인증 시간
          example: '2024-01-15T14:25:00'
    PropertyReview:
      type: object
      description: 매물 후기 엔티티
      properties:
        id:
          type: integer
          description: 후기 ID
          example: 1
        propertyId:
          type: integer
          description: 매물 ID
          example: 1
        userId:
          type: integer
          description: 사용자 ID
          example: 1
        title:
          type: string
          description: 후기 제목
          example: 정말 좋은 자취방이었어요!
        content:
          type: string
          description: 후기 내용
          example: 시설이 깔끔하고 관리도 잘 되네요.
        imageUrl:
          type: string
          description: 후기 이미지 URL
          example: https://example.com/review.jpg
        rating:
          type: integer
          description: 평점 (1-5)
          example: 5
        noiseLevel:
          type: integer
          description: 소음 수준 (1-5)
          example: 2
        safetyLevel:
          type: integer
          description: 안전 수준 (1-5)
          example: 5
        convenienceLevel:
          type: integer
          description: 편의성 수준 (1-5)
          example: 4
        managementLevel:
          type: integer
          description: 관리 수준 (1-5)
          example: 5
        pros:
          type: string
          description: 장점
          example: 교통편이 좋고 주변 시설이 많아요
        cons:
          type: string
          description: 단점
          example: 조금 시끄러울 수 있어요
        livingPeriod:
          type: string
          description: 거주 기간
          example: 6개월
        createdAt:
          type: string
          format: date-time
          description: 생성 시간
          example: '2024-01-15T14:25:00'
    CreatePropertyReviewRequest:
      type: object
      description: 매물 후기 작성 요청
      required:
        - propertyId
        - title
        - content
        - rating
      properties:
        propertyId:
          type: integer
          description: 매물 ID
          example: 1
        title:
          type: string
          description: 후기 제목
          example: 정말 좋은 자취방이었어요!
        content:
          type: string
          description: 후기 내용
          example: 시설이 깔끔하고 관리도 잘 되네요.
        imageUrl:
          type: string
          description: 후기 이미지 URL
          example: https://example.com/review.jpg
        rating:
          type: integer
          description: 평점 (1-5)
          example: 5
        noiseLevel:
          type: integer
          description: 소음 수준 (1-5)
          example: 2
        safetyLevel:
          type: integer
          description: 안전 수준 (1-5)
          example: 5
        convenienceLevel:
          type: integer
          description: 편의성 수준 (1-5)
          example: 4
        managementLevel:
          type: integer
          description: 관리 수준 (1-5)
          example: 5
        pros:
          type: string
          description: 장점
          example: 교통편이 좋고 주변 시설이 많아요
        cons:
          type: string
          description: 단점
          example: 조금 시끄러울 수 있어요
        livingPeriod:
          type: string
          description: 거주 기간
          example: 6개월
    UserCharacterStats:
      type: object
      description: 사용자 캐릭터 통계
      properties:
        totalCharacters:
          type: integer
          description: 총 보유 캐릭터 수
          example: 15
        commonCount:
          type: integer
          description: 일반 캐릭터 수
          example: 8
        rareCount:
          type: integer
          description: 레어 캐릭터 수
          example: 4
        epicCount:
          type: integer
          description: 에픽 캐릭터 수
          example: 2
        legendaryCount:
          type: integer
          description: 레전더리 캐릭터 수
          example: 1
    # 게시글 관련 스키마
    CreatePostRequest:
      type: object
      description: 게시글 작성 요청
      required:
        - title
        - content
      properties:
        title:
          type: string
          description: 게시글 제목
          example: 자취방 구합니다
        content:
          type: string
          description: 게시글 내용
          example: 경기도 성남시 자취방 구합니다. 월세 50만원 이하로...
        images:
          type: array
          description: 첨부 이미지 파일들
          items:
            type: string
            format: binary
    UpdatePostRequest:
      type: object
      description: 게시글 수정 요청
      properties:
        title:
          type: string
          description: 게시글 제목
          example: 자취방 구합니다 (수정)
        content:
          type: string
          description: 게시글 내용
          example: 경기도 성남시 자취방 구합니다. 월세 50만원 이하로... (수정된 내용)
    PostResponse:
      type: object
      description: 게시글 응답 정보
      properties:
        id:
          type: integer
          description: 게시글 ID
          example: 1
        title:
          type: string
          description: 게시글 제목
          example: 자취방 구합니다
        content:
          type: string
          description: 게시글 내용
          example: 경기도 성남시 자취방 구합니다...
        authorName:
          type: string
          description: 작성자 닉네임
          example: 홍길동
        authorProfileImage:
          type: string
          description: 작성자 프로필 이미지
          example: https://example.com/profile.jpg
        images:
          type: array
          description: 첨부 이미지 URLs
          items:
            type: string
          example: ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]
        likeCount:
          type: integer
          description: 좋아요 수
          example: 15
        scrapCount:
          type: integer
          description: 스크랩 수
          example: 8
        commentCount:
          type: integer
          description: 댓글 수
          example: 23
        isLiked:
          type: boolean
          description: 현재 사용자가 좋아요를 눌렀는지 여부
          example: true
        isScrapped:
          type: boolean
          description: 현재 사용자가 스크랩했는지 여부
          example: false
        createdAt:
          type: string
          format: date-time
          description: 작성 시간
          example: '2024-01-15T10:30:00'
        updatedAt:
          type: string
          format: date-time
          description: 수정 시간
          example: '2024-01-15T14:25:00'
    # 댓글 관련 스키마
    CreateCommentRequest:
      type: object
      description: 댓글 작성 요청
      required:
        - content
      properties:
        content:
          type: string
          description: 댓글 내용
          example: 좋은 자취방이네요! 연락드릴게요.
    UpdateCommentRequest:
      type: object
      description: 댓글 수정 요청
      required:
        - content
      properties:
        content:
          type: string
          description: 댓글 내용
          example: 좋은 자취방이네요! 연락드릴게요. (수정된 내용)
    CommentResponse:
      type: object
      description: 댓글 응답 정보
      properties:
        id:
          type: integer
          description: 댓글 ID
          example: 1
        content:
          type: string
          description: 댓글 내용
          example: 좋은 자취방이네요! 연락드릴게요.
        authorName:
          type: string
          description: 작성자 닉네임
          example: 김철수
        authorProfileImage:
          type: string
          description: 작성자 프로필 이미지
          example: https://example.com/profile.jpg
        parentCommentId:
          type: integer
          description: 부모 댓글 ID (대댓글인 경우)
          example: null
        replies:
          type: array
          description: 대댓글 목록
          items:
            $ref: '#/components/schemas/CommentResponse'
        isAuthor:
          type: boolean
          description: 현재 사용자가 작성자인지 여부
          example: false
        createdAt:
          type: string
          format: date-time
          description: 작성 시간
          example: '2024-01-15T14:25:00'
        updatedAt:
          type: string
          format: date-time
          description: 수정 시간
          example: '2024-01-15T14:25:00'
    # 채팅 관련 스키마
    ChatRoomResponse:
      type: object
      description: 채팅방 응답 정보
      properties:
        id:
          type: integer
          description: 채팅방 ID
          example: 1
        otherUserName:
          type: string
          description: 상대방 사용자 이름
          example: 홍길동
        otherUserNickname:
          type: string
          description: 상대방 사용자 닉네임
          example: 홍길동
        otherUserProfileImage:
          type: string
          description: 상대방 프로필 이미지 URL
          example: https://example.com/profile.jpg
        createdAt:
          type: string
          format: date-time
          description: 채팅방 생성 시간
          example: '2024-01-15T10:30:00'
        lastMessageTime:
          type: string
          format: date-time
          description: 마지막 메시지 시간
          example: '2024-01-15T14:25:00'
        lastMessageContent:
          type: string
          description: 마지막 메시지 내용
          example: 안녕하세요!
        unreadCount:
          type: integer
          description: 읽지 않은 메시지 수
          example: 3
    ChatMessageResponse:
      type: object
      description: 채팅 메시지 응답 정보
      properties:
        id:
          type: integer
          description: 메시지 ID
          example: 1
        content:
          type: string
          description: 메시지 내용
          example: 안녕하세요!
        imageUrl:
          type: string
          description: 이미지 URL
          example: https://example.com/image.jpg
        messageType:
          type: string
          description: 메시지 타입
          enum: [TEXT, IMAGE, FILE]
          example: TEXT
        senderName:
          type: string
          description: 발신자 이름
          example: 홍길동
        senderNickname:
          type: string
          description: 발신자 닉네임
          example: 홍길동
        senderProfileImage:
          type: string
          description: 발신자 프로필 이미지 URL
          example: https://example.com/profile.jpg
        createdAt:
          type: string
          format: date-time
          description: 메시지 생성 시간
          example: '2024-01-15T14:25:00'
        isFromCurrentUser:
          type: boolean
          description: 현재 사용자가 보낸 메시지인지 여부
          example: true
    SendMessageRequest:
      type: object
      description: 메시지 전송 요청
      required:
        - content
        - messageType
      properties:
        content:
          type: string
          description: 메시지 내용
          example: 안녕하세요!
        imageUrl:
          type: string
          description: 이미지 URL
          example: https://example.com/image.jpg
        messageType:
          type: string
          description: 메시지 타입
          enum: [TEXT, IMAGE, FILE]
          example: TEXT