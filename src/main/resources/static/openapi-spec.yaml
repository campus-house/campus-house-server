openapi: 3.0.3
info:
  title: 캠퍼스 하우스 API
  description: 대학생 자취 커뮤니티 앱의 백엔드 API 문서
  version: 1.0.0
  contact:
    name: Campus House Team
    email: contact@campushouse.com
    url: https://campushouse.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080
    description: 개발 서버
  - url: https://api.campushouse.com
    description: 프로덕션 서버
security:
  - bearerAuth: []
paths:
  # 게시글 관리
  /api/boards/{type}/posts:
    post:
      tags:
        - 게시글
      summary: 게시글 작성
      description: 새로운 게시글을 작성합니다. 사진 포함 가능합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 게시판 타입
          schema:
            type: string
            example: free
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: 게시글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
    get:
      tags:
        - 게시글
      summary: 모든 게시글 조회
      description: 페이징을 지원하는 게시글 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 게시판 타입
          schema:
            type: string
            example: free
        - name: page
          in: query
          description: 페이지 번호 (0부터 시작)
          schema:
            type: integer
            default: 0
            example: 0
        - name: size
          in: query
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 20
            example: 20
        - name: sort
          in: query
          description: 정렬 기준
          schema:
            type: string
            enum: [latest, popular]
            default: latest
            example: latest
      responses:
        '200':
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'
        '401':
          description: 인증 필요
  /api/boards/{type}/posts/latest:
    get:
      tags:
        - 게시글
      summary: 최신순 게시글 조회
      description: 최신순으로 정렬된 게시글 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 게시판 타입
          schema:
            type: string
            example: free
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 최신순 게시글 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'
        '401':
          description: 인증 필요
  /api/boards/{type}/posts/popular:
    get:
      tags:
        - 게시글
      summary: 인기순 게시글 조회
      description: 좋아요 수 기준으로 정렬된 인기 게시글 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 게시판 타입
          schema:
            type: string
            example: free
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 인기순 게시글 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'
        '401':
          description: 인증 필요
  /api/boards/{type}/posts/search:
    get:
      tags:
        - 게시글
      summary: 게시글 검색
      description: 제목과 내용에서 키워드를 검색합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          description: 게시판 타입
          schema:
            type: string
            example: free
        - name: keyword
          in: query
          required: true
          description: 검색 키워드
          schema:
            type: string
            example: 자취방
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 검색 결과 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'
        '401':
          description: 인증 필요
  /api/posts/{id}:
    get:
      tags:
        - 게시글
      summary: 특정 게시글 조회
      description: 게시글 ID로 특정 게시글을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 게시글 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: 게시글을 찾을 수 없음
        '401':
          description: 인증 필요
    put:
      tags:
        - 게시글
      summary: 게시글 수정
      description: 내가 작성한 게시글만 수정할 수 있습니다.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: 게시글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '403':
          description: 수정 권한 없음
        '404':
          description: 게시글을 찾을 수 없음
    delete:
      tags:
        - 게시글
      summary: 게시글 삭제
      description: 내가 작성한 게시글만 삭제할 수 있습니다.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 게시글 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 게시글이 삭제되었습니다.
        '401':
          description: 인증 필요
        '403':
          description: 삭제 권한 없음
        '404':
          description: 게시글을 찾을 수 없음
  /api/posts/{postId}/like:
    post:
      tags:
        - 게시글
      summary: 좋아요 달기
      description: 게시물에 좋아요를 추가합니다. 게시물의 좋아요 수가 1 증가하고 유저의 좋아요 목록에 추가됩니다.
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 좋아요 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 좋아요가 추가되었습니다.
                  likeCount:
                    type: integer
                    example: 15
        '400':
          description: 이미 좋아요를 누른 게시글
        '401':
          description: 인증 필요
        '404':
          description: 게시글을 찾을 수 없음
  /api/posts/{postId}/scrap:
    post:
      tags:
        - 게시글
      summary: 스크랩 하기
      description: 게시물을 스크랩합니다. 게시물의 스크랩 수가 1 증가하고 유저의 스크랩 목록에 추가됩니다.
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 스크랩 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 스크랩이 추가되었습니다.
                  scrapCount:
                    type: integer
                    example: 8
        '400':
          description: 이미 스크랩한 게시글
        '401':
          description: 인증 필요
        '404':
          description: 게시글을 찾을 수 없음
  # 댓글 관리
  /api/posts/{postId}/comments:
    post:
      tags:
        - 댓글
      summary: 댓글 작성
      description: 게시물에 댓글을 작성합니다. 게시물의 댓글 수가 1 증가합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: 댓글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '404':
          description: 게시글을 찾을 수 없음
    get:
      tags:
        - 댓글
      summary: 댓글 목록 조회
      description: 게시물의 댓글 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          description: 게시글 ID
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: 페이지당 댓글 수
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 댓글 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentResponse'
        '401':
          description: 인증 필요
        '404':
          description: 게시글을 찾을 수 없음
  /api/comments/{parentCommentId}/replies:
    post:
      tags:
        - 댓글
      summary: 대댓글 작성
      description: 부모 댓글에 대댓글을 작성합니다. 게시물의 댓글 수가 1 증가합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: parentCommentId
          in: path
          required: true
          description: 부모 댓글 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: 대댓글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '404':
          description: 부모 댓글을 찾을 수 없음
  /api/comments/{commentId}:
    put:
      tags:
        - 댓글
      summary: 댓글 수정
      description: 내가 작성한 댓글만 수정할 수 있습니다.
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          description: 댓글 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: 댓글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '403':
          description: 수정 권한 없음
        '404':
          description: 댓글을 찾을 수 없음
    delete:
      tags:
        - 댓글
      summary: 댓글 삭제
      description: 내가 작성한 댓글만 삭제할 수 있습니다.
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          description: 댓글 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 댓글 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 댓글이 삭제되었습니다.
        '401':
          description: 인증 필요
        '403':
          description: 삭제 권한 없음
        '404':
          description: 댓글을 찾을 수 없음
  # 채팅 관리
  /api/chat/rooms:
    post:
      tags:
        - 채팅
      summary: 채팅방 생성/조회
      description: 이미 채팅방이 있으면 기존 방 반환, 없으면 새 방 생성
      security:
        - bearerAuth: []
      parameters:
        - name: otherUserName
          in: query
          required: true
          description: 상대방 사용자 닉네임
          schema:
            type: string
            example: 홍길동
      responses:
        '200':
          description: 채팅방 조회/생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoomResponse'
              example:
                id: 1
                otherUserName: 홍길동
                otherUserNickname: 홍길동
                otherUserProfileImage: https://example.com/profile.jpg
                createdAt: '2024-01-15T10:30:00'
                lastMessageTime: '2024-01-15T14:25:00'
                lastMessageContent: 안녕하세요!
                unreadCount: 3
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
  /api/chat/rooms/user/{userName}:
    get:
      tags:
        - 채팅
      summary: 사용자 채팅방 목록
      description: 특정 사용자의 채팅방 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: userName
          in: path
          required: true
          description: 사용자 닉네임
          schema:
            type: string
            example: 홍길동
      responses:
        '200':
          description: 채팅방 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatRoomResponse'
        '401':
          description: 인증 필요
        '403':
          description: 다른 사용자의 채팅방 목록 조회 권한 없음
  /api/chat/rooms/{roomId}:
    get:
      tags:
        - 채팅
      summary: 특정 채팅방 조회
      description: 특정 채팅방의 정보를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: 채팅방 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 채팅방 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoomResponse'
        '404':
          description: 채팅방을 찾을 수 없음
        '403':
          description: 채팅방 접근 권한 없음
  /api/chat/rooms/users/{user1Name}/{user2Name}:
    get:
      tags:
        - 채팅
      summary: 두 사용자 간 채팅방 조회
      description: 두 사용자 간의 채팅방을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: user1Name
          in: path
          required: true
          description: 사용자1 닉네임
          schema:
            type: string
            example: 홍길동
        - name: user2Name
          in: path
          required: true
          description: 사용자2 닉네임
          schema:
            type: string
            example: 김철수
      responses:
        '200':
          description: 채팅방 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatRoomResponse'
        '404':
          description: 채팅방을 찾을 수 없음
        '403':
          description: 채팅방 접근 권한 없음
  /api/chat/rooms/{roomId}/messages:
    post:
      tags:
        - 채팅
      summary: 메시지 전송
      description: 채팅방에 메시지를 전송합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: 채팅방 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
            example:
              content: 안녕하세요!
              messageType: TEXT
      responses:
        '200':
          description: 메시지 전송 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageResponse'
              example:
                id: 1
                content: 안녕하세요!
                imageUrl: null
                messageType: TEXT
                senderName: 홍길동
                senderNickname: 홍길동
                senderProfileImage: https://example.com/profile.jpg
                createdAt: '2024-01-15T14:25:00'
                isFromCurrentUser: true
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 필요
        '403':
          description: 채팅방 접근 권한 없음
    get:
      tags:
        - 채팅
      summary: 메시지 목록 조회
      description: 채팅방의 메시지 목록을 조회합니다. (페이징 지원)
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: 채팅방 ID
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: 페이지 번호 (0부터 시작)
          schema:
            type: integer
            default: 0
            example: 0
        - name: size
          in: query
          description: 페이지당 메시지 수
          schema:
            type: integer
            default: 20
            example: 20
      responses:
        '200':
          description: 메시지 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessageResponse'
        '404':
          description: 채팅방을 찾을 수 없음
        '403':
          description: 채팅방 접근 권한 없음
  /api/chat/rooms/{roomId}/read:
    post:
      tags:
        - 채팅
      summary: 메시지 읽음 처리
      description: 채팅방의 메시지를 읽음 처리합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: 채팅방 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 읽음 처리 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 읽음 처리 완료
        '401':
          description: 인증 필요
        '403':
          description: 채팅방 접근 권한 없음
  /api/chat/unread-count/{userName}:
    get:
      tags:
        - 채팅
      summary: 읽지 않은 메시지 수 조회
      description: 사용자의 읽지 않은 메시지 수를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: userName
          in: path
          required: true
          description: 사용자 닉네임
          schema:
            type: string
            example: 홍길동
      responses:
        '200':
          description: 읽지 않은 메시지 수 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  unreadCount:
                    type: integer
                    example: 5
        '401':
          description: 인증 필요
        '403':
          description: 다른 사용자의 읽지 않은 메시지 수 조회 권한 없음
  /api/chat/rooms/{roomId}/unread-count/{userName}:
    get:
      tags:
        - 채팅
      summary: 특정 채팅방 읽지 않은 메시지 수
      description: 특정 채팅방의 읽지 않은 메시지 수를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          description: 채팅방 ID
          schema:
            type: integer
            example: 1
        - name: userName
          in: path
          required: true
          description: 사용자 닉네임
          schema:
            type: string
            example: 홍길동
      responses:
        '200':
          description: 읽지 않은 메시지 수 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  unreadCount:
                    type: integer
                    example: 2
        '401':
          description: 인증 필요
        '403':
          description: 채팅방 접근 권한 없음
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 토큰을 입력하세요. 예: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  schemas:
    # 게시글 관련 스키마
    CreatePostRequest:
      type: object
      description: 게시글 작성 요청
      required:
        - title
        - content
      properties:
        title:
          type: string
          description: 게시글 제목
          example: 자취방 구합니다
        content:
          type: string
          description: 게시글 내용
          example: 경기도 성남시 자취방 구합니다. 월세 50만원 이하로...
        images:
          type: array
          description: 첨부 이미지 파일들
          items:
            type: string
            format: binary
    UpdatePostRequest:
      type: object
      description: 게시글 수정 요청
      properties:
        title:
          type: string
          description: 게시글 제목
          example: 자취방 구합니다 (수정)
        content:
          type: string
          description: 게시글 내용
          example: 경기도 성남시 자취방 구합니다. 월세 50만원 이하로... (수정된 내용)
    PostResponse:
      type: object
      description: 게시글 응답 정보
      properties:
        id:
          type: integer
          description: 게시글 ID
          example: 1
        title:
          type: string
          description: 게시글 제목
          example: 자취방 구합니다
        content:
          type: string
          description: 게시글 내용
          example: 경기도 성남시 자취방 구합니다...
        authorName:
          type: string
          description: 작성자 닉네임
          example: 홍길동
        authorProfileImage:
          type: string
          description: 작성자 프로필 이미지
          example: https://example.com/profile.jpg
        images:
          type: array
          description: 첨부 이미지 URLs
          items:
            type: string
          example: ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]
        likeCount:
          type: integer
          description: 좋아요 수
          example: 15
        scrapCount:
          type: integer
          description: 스크랩 수
          example: 8
        commentCount:
          type: integer
          description: 댓글 수
          example: 23
        isLiked:
          type: boolean
          description: 현재 사용자가 좋아요를 눌렀는지 여부
          example: true
        isScrapped:
          type: boolean
          description: 현재 사용자가 스크랩했는지 여부
          example: false
        createdAt:
          type: string
          format: date-time
          description: 작성 시간
          example: '2024-01-15T10:30:00'
        updatedAt:
          type: string
          format: date-time
          description: 수정 시간
          example: '2024-01-15T14:25:00'
    # 댓글 관련 스키마
    CreateCommentRequest:
      type: object
      description: 댓글 작성 요청
      required:
        - content
      properties:
        content:
          type: string
          description: 댓글 내용
          example: 좋은 자취방이네요! 연락드릴게요.
    UpdateCommentRequest:
      type: object
      description: 댓글 수정 요청
      required:
        - content
      properties:
        content:
          type: string
          description: 댓글 내용
          example: 좋은 자취방이네요! 연락드릴게요. (수정된 내용)
    CommentResponse:
      type: object
      description: 댓글 응답 정보
      properties:
        id:
          type: integer
          description: 댓글 ID
          example: 1
        content:
          type: string
          description: 댓글 내용
          example: 좋은 자취방이네요! 연락드릴게요.
        authorName:
          type: string
          description: 작성자 닉네임
          example: 김철수
        authorProfileImage:
          type: string
          description: 작성자 프로필 이미지
          example: https://example.com/profile.jpg
        parentCommentId:
          type: integer
          description: 부모 댓글 ID (대댓글인 경우)
          example: null
        replies:
          type: array
          description: 대댓글 목록
          items:
            $ref: '#/components/schemas/CommentResponse'
        isAuthor:
          type: boolean
          description: 현재 사용자가 작성자인지 여부
          example: false
        createdAt:
          type: string
          format: date-time
          description: 작성 시간
          example: '2024-01-15T14:25:00'
        updatedAt:
          type: string
          format: date-time
          description: 수정 시간
          example: '2024-01-15T14:25:00'
    # 채팅 관련 스키마
    ChatRoomResponse:
      type: object
      description: 채팅방 응답 정보
      properties:
        id:
          type: integer
          description: 채팅방 ID
          example: 1
        otherUserName:
          type: string
          description: 상대방 사용자 이름
          example: 홍길동
        otherUserNickname:
          type: string
          description: 상대방 사용자 닉네임
          example: 홍길동
        otherUserProfileImage:
          type: string
          description: 상대방 프로필 이미지 URL
          example: https://example.com/profile.jpg
        createdAt:
          type: string
          format: date-time
          description: 채팅방 생성 시간
          example: '2024-01-15T10:30:00'
        lastMessageTime:
          type: string
          format: date-time
          description: 마지막 메시지 시간
          example: '2024-01-15T14:25:00'
        lastMessageContent:
          type: string
          description: 마지막 메시지 내용
          example: 안녕하세요!
        unreadCount:
          type: integer
          description: 읽지 않은 메시지 수
          example: 3
    ChatMessageResponse:
      type: object
      description: 채팅 메시지 응답 정보
      properties:
        id:
          type: integer
          description: 메시지 ID
          example: 1
        content:
          type: string
          description: 메시지 내용
          example: 안녕하세요!
        imageUrl:
          type: string
          description: 이미지 URL
          example: https://example.com/image.jpg
        messageType:
          type: string
          description: 메시지 타입
          enum: [TEXT, IMAGE, FILE]
          example: TEXT
        senderName:
          type: string
          description: 발신자 이름
          example: 홍길동
        senderNickname:
          type: string
          description: 발신자 닉네임
          example: 홍길동
        senderProfileImage:
          type: string
          description: 발신자 프로필 이미지 URL
          example: https://example.com/profile.jpg
        createdAt:
          type: string
          format: date-time
          description: 메시지 생성 시간
          example: '2024-01-15T14:25:00'
        isFromCurrentUser:
          type: boolean
          description: 현재 사용자가 보낸 메시지인지 여부
          example: true
    SendMessageRequest:
      type: object
      description: 메시지 전송 요청
      required:
        - content
        - messageType
      properties:
        content:
          type: string
          description: 메시지 내용
          example: 안녕하세요!
        imageUrl:
          type: string
          description: 이미지 URL
          example: https://example.com/image.jpg
        messageType:
          type: string
          description: 메시지 타입
          enum: [TEXT, IMAGE, FILE]
          example: TEXT